;/*******************************************************
;This program was created by the CodeWizardAVR V3.32a
;Automatic Program Generator
;© Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2018-11-30
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// SPI functions
;#include <spi.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;unsigned char SPI_Receive(void);
;void led_a();
;void led_b();
;void led_c();
;void led_d();
;unsigned char data, b, c;
;
;void main(void) {
; 0000 0028 void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0029     unsigned char x = 0, y = 0;
; 0000 002A 
; 0000 002B     // Port B initialization
; 0000 002C     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 002D     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;	x -> R17
;	y -> R16
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002E     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 002F     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0030 
; 0000 0031     DDRD = 0x0f;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0032 
; 0000 0033     // SPI initialization
; 0000 0034     // SPI Type: Slave
; 0000 0035     // SPI Clock Rate: 4000.000 kHz
; 0000 0036     // SPI Clock Phase: Cycle Start
; 0000 0037     // SPI Clock Polarity: Low
; 0000 0038     // SPI Data Order: MSB First
; 0000 0039     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003A     SPSR=(0<<SPI2X);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003B 
; 0000 003C     // Alphanumeric LCD initialization
; 0000 003D     // Connections are specified in the
; 0000 003E     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 003F     // RS - PORTA Bit 0
; 0000 0040     // RD - PORTA Bit 1
; 0000 0041     // EN - PORTA Bit 2
; 0000 0042     // D4 - PORTA Bit 4
; 0000 0043     // D5 - PORTA Bit 5
; 0000 0044     // D6 - PORTA Bit 6
; 0000 0045     // D7 - PORTA Bit 7
; 0000 0046     // Characters/line: 16
; 0000 0047     lcd_init(16);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0048     while (1) {
;PCODE: $0000001E VOL: 0
; 0000 0049         data = SPI_Receive();
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004A         if(x == 16) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004B             x = 0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004C             y++;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004D             if(y == 2) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004E                 y = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004F             }
; 0000 0050         }
;PCODE: $0000002D VOL: 0
; 0000 0051         lcd_gotoxy(x,y);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0052         lcd_putchar(data);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0053         if(data == 'a') {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0054             led_a();
;PCODE: $00000037 VOL: 0
; 0000 0055         }
; 0000 0056         else if(data == 'b') {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0057             led_b();
;PCODE: $0000003D VOL: 0
; 0000 0058         }
; 0000 0059         else if(data == 'c') {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005A             led_c();
;PCODE: $00000043 VOL: 0
; 0000 005B         }
; 0000 005C         else if(data == 'd') {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005D             led_d();
;PCODE: $00000049 VOL: 0
; 0000 005E         }
; 0000 005F         x++;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0060     }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0061 }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;unsigned char SPI_Receive(void) {
; 0000 0062 unsigned char SPI_Receive(void) {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0063     while( !(SPSR & (1<<SPIF)));
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0064 
; 0000 0065     return SPDR;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0066 }
;PCODE: $0000005F VOL: 0
;void led_a() {
; 0000 0067 void led_a() {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0068     PORTD = 0x0f;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0069 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;void led_b() {
; 0000 006A void led_b() {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006B     if(b % 2)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 006C         PORTD = 0x03;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006D     else
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006E         PORTD = 0x0c;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006F     b++;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0070 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;void led_c() {
; 0000 0071 void led_c() {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0072     switch (c)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0073            {
; 0000 0074            case 0 : PORTD = 0x01;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0075 
; 0000 0076            break;
;PCODE: $00000080 VOL: 0
; 0000 0077 
; 0000 0078            case 1 : PORTD = 0x02;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0079 
; 0000 007A            break;
;PCODE: $00000086 VOL: 0
; 0000 007B 
; 0000 007C            case 2 : PORTD = 0x04;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007D 
; 0000 007E            break;
;PCODE: $0000008C VOL: 0
; 0000 007F 
; 0000 0080            case 3 : PORTD = 0x08;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0081 
; 0000 0082            break;
;PCODE: $00000092 VOL: 0
; 0000 0083            }
;PCODE: $00000093 VOL: 0
; 0000 0084     c++;
;PCODE: $00000094 VOL: 0
; 0000 0085     if(c >= 4)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0086     c = 0;
;PCODE: $00000098 VOL: 0
; 0000 0087 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;void led_d() {
; 0000 0088 void led_d() {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0089     PORTD = 0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 008A }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
