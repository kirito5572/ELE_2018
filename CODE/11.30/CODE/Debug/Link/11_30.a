;/*******************************************************
;This program was created by the CodeWizardAVR V3.32a
;Automatic Program Generator
;© Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2018-11-30
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// SPI functions
;#include <spi.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;unsigned char UART_Receive(void);
;void SPI_Transmit(unsigned char data);
;
;void main(void) {
; 0000 0023 void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0024     // Port B initialization
; 0000 0025     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0026     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0027     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0028     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029 
; 0000 002A     // USART0 initialization
; 0000 002B     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 002C     // USART0 Receiver: On
; 0000 002D     // USART0 Transmitter: Off
; 0000 002E     // USART0 Mode: Asynchronous
; 0000 002F     // USART0 Baud Rate: 9600
; 0000 0030     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0031     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0032     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0033     UBRR0H=0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0034     UBRR0L=0x67;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0035 
; 0000 0036     // SPI initialization
; 0000 0037     // SPI Type: Master
; 0000 0038     // SPI Clock Rate: 125.000 kHz
; 0000 0039     // SPI Clock Phase: Cycle Start
; 0000 003A     // SPI Clock Polarity: Low
; 0000 003B     // SPI Data Order: MSB First
; 0000 003C     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003D     SPSR=(0<<SPI2X);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003E 
; 0000 003F while (1) {
;PCODE: $00000020 VOL: 0
; 0000 0040         SPI_Transmit(UART_Receive());
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0041     }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0042 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;unsigned char UART_Receive(void) {
; 0000 0043 unsigned char UART_Receive(void) {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0044 
; 0000 0045     while ( !(UCSR0A & (1<<RXC0)));
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0046 
; 0000 0047     return UDR0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0048 }
;PCODE: $00000033 VOL: 0
;void SPI_Transmit(unsigned char data) {
; 0000 0049 void SPI_Transmit(unsigned char data) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004A     SPDR = data;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;	data -> R17
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004B 
; 0000 004C     while( !(SPSR & (1<<SPIF)));
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004D }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
