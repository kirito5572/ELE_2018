
AVRASM ver. 2.1.30  D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm Fri Aug 31 14:09:19 2018

D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1097): warning: Register r5 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1098): warning: Register r4 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1099): warning: Register r7 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1100): warning: Register r6 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1101): warning: Register r9 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1102): warning: Register r8 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1103): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32a Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _st=R5
                 	.DEF _nd=R4
                 	.DEF _rd=R7
                 	.DEF _th=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 00c9 	JMP  _ADCinter
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 412d
000050 442f
000051 4320
000052 4e4f      	.DB  0x2D,0x41,0x2F,0x44,0x20,0x43,0x4F,0x4E
000053 4556
000054 5352
000055 4f49
000056 2d4e      	.DB  0x56,0x45,0x52,0x53,0x49,0x4F,0x4E,0x2D
000057 3100
000058 4230
000059 5449
00005a 4420      	.DB  0x0,0x31,0x30,0x42,0x49,0x54,0x20,0x44
00005b 4345
00005c 3e2d
D:\ELE_2018\CODE\Debug\List\LCD_4BIT.asm(1158): warning: .cseg .db misalignment - padding zero byte
00005d 0000      	.DB  0x45,0x43,0x2D,0x3E,0x0
                 _0x2000003:
00005e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005f 0002      	.DW  0x02
000060 0500      	.DW  __base_y_G100
000061 00bc      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bff5      	OUT  MCUCR,R31
000068 bfe5      	OUT  MCUCR,R30
000069 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00006b e08d      	LDI  R24,(14-2)+1
00006c e0a2      	LDI  R26,2
00006d 27bb      	CLR  R27
                 __CLEAR_REG:
00006e 93ed      	ST   X+,R30
00006f 958a      	DEC  R24
000070 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000071 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000072 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000073 e0a0      	LDI  R26,LOW(__SRAM_START)
000074 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008a bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008c bfed      	OUT  SPL,R30
00008d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000090 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000091 940c 0093 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;// Alphanumeric LCD functions
                 ;#include <lcd.h>
                 ;#asm
                 .equ __lcd_port = 0x12 ; // PORTD
                 ; 0000 0006 #endasm
                 ;#include <delay.h>
                 ;typedef unsigned char byte;
                 ;byte st,nd,rd,th;
                 ;void init();
                 ;void main() {
                 ; 0000 000B void main() {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000C     init();
000093 d02a      	RCALL _init
                 ; 0000 000D     lcd_init(16);
000094 e1a0      	LDI  R26,LOW(16)
000095 d0f6      	RCALL _lcd_init
                 ; 0000 000E     lcd_clear();
000096 d0ac      	RCALL _lcd_clear
                 ; 0000 000F     lcd_gotoxy(0,0);
000097 e0e0      	LDI  R30,LOW(0)
000098 93ea      	ST   -Y,R30
000099 e0a0      	LDI  R26,LOW(0)
00009a d09a      	RCALL _lcd_gotoxy
                 ; 0000 0010     lcd_putsf("-A/D CONVERSION-");
                +
00009b e9ae     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00009c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00009d d0cb      	RCALL _lcd_putsf
                 ; 0000 0011     lcd_gotoxy(0,1);
00009e e0e0      	LDI  R30,LOW(0)
00009f 93ea      	ST   -Y,R30
0000a0 e0a1      	LDI  R26,LOW(1)
0000a1 d093      	RCALL _lcd_gotoxy
                 ; 0000 0012     lcd_putsf("10BIT DEC->");
                +
0000a2 eaaf     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
0000a3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
0000a4 d0c4      	RCALL _lcd_putsf
                 ; 0000 0013     while(1) {
                 _0x3:
                 ; 0000 0014         ADCSRA = 0xcf;
0000a5 ecef      	LDI  R30,LOW(207)
0000a6 b9e6      	OUT  0x6,R30
                 ; 0000 0015         delay_ms(5);
0000a7 e0a5      	LDI  R26,LOW(5)
0000a8 e0b0      	LDI  R27,0
0000a9 d152      	RCALL _delay_ms
                 ; 0000 0016         ADCSRA = 0x8f;
0000aa e8ef      	LDI  R30,LOW(143)
0000ab b9e6      	OUT  0x6,R30
                 ; 0000 0017         lcd_gotoxy(11,1);
0000ac e0eb      	LDI  R30,LOW(11)
0000ad 93ea      	ST   -Y,R30
0000ae e0a1      	LDI  R26,LOW(1)
0000af d085      	RCALL _lcd_gotoxy
                 ; 0000 0018         lcd_putchar(th + '0');
0000b0 2da6      	MOV  R26,R6
0000b1 5da0      	SUBI R26,-LOW(48)
0000b2 d09d      	RCALL _lcd_putchar
                 ; 0000 0019         lcd_putchar(rd + '0');
0000b3 2da7      	MOV  R26,R7
0000b4 5da0      	SUBI R26,-LOW(48)
0000b5 d09a      	RCALL _lcd_putchar
                 ; 0000 001A         lcd_putchar(nd + '0');
0000b6 2da4      	MOV  R26,R4
0000b7 5da0      	SUBI R26,-LOW(48)
0000b8 d097      	RCALL _lcd_putchar
                 ; 0000 001B         lcd_putchar(st + '0');
0000b9 2da5      	MOV  R26,R5
0000ba 5da0      	SUBI R26,-LOW(48)
0000bb d094      	RCALL _lcd_putchar
                 ; 0000 001C     }
0000bc cfe8      	RJMP _0x3
                 ; 0000 001D }
                 _0x6:
0000bd cfff      	RJMP _0x6
                 ; .FEND
                 ;void init() {
                 ; 0000 001E void init() {
                 _init:
                 ; .FSTART _init
                 ; 0000 001F     DDRD = 0xff;
0000be efef      	LDI  R30,LOW(255)
0000bf bbe1      	OUT  0x11,R30
                 ; 0000 0020     DDRF = 0x00;
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 93e0 0061 	STS  97,R30
                 ; 0000 0021     ADMUX = 0x00;
0000c3 b9e7      	OUT  0x7,R30
                 ; 0000 0022     ADCSRA = 0x8f;
0000c4 e8ef      	LDI  R30,LOW(143)
0000c5 b9e6      	OUT  0x6,R30
                 ; 0000 0023     SREG = 0x80;
0000c6 e8e0      	LDI  R30,LOW(128)
0000c7 bfef      	OUT  0x3F,R30
                 ; 0000 0024 }
0000c8 9508      	RET
                 ; .FEND
                 ;interrupt [ADC_INT] void ADCinter(void) {
                 ; 0000 0025 interrupt [22] void ADCinter(void) {
                 _ADCinter:
                 ; .FSTART _ADCinter
0000c9 920a      	ST   -Y,R0
0000ca 921a      	ST   -Y,R1
0000cb 939a      	ST   -Y,R25
0000cc 93aa      	ST   -Y,R26
0000cd 93ba      	ST   -Y,R27
0000ce 93ea      	ST   -Y,R30
0000cf 93fa      	ST   -Y,R31
0000d0 b7ef      	IN   R30,SREG
0000d1 93ea      	ST   -Y,R30
                 ; 0000 0026     int count = 0;
                 ; 0000 0027     count = ADCW & 0x3ff;
0000d2 931a      	ST   -Y,R17
0000d3 930a      	ST   -Y,R16
                 ;	count -> R16,R17
                +
0000d4 e000     +LDI R16 , LOW ( 0 )
0000d5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000d6 b1e4      	IN   R30,0x4
0000d7 b1f5      	IN   R31,0x4+1
0000d8 70f3      	ANDI R31,HIGH(0x3FF)
0000d9 018f      	MOVW R16,R30
                 ; 0000 0028     st = count % 10;
0000da 01d8      	MOVW R26,R16
0000db e0ea      	LDI  R30,LOW(10)
0000dc e0f0      	LDI  R31,HIGH(10)
0000dd d102      	RCALL __MODW21
0000de 2e5e      	MOV  R5,R30
                 ; 0000 0029     nd = (count / 10) % 10;
0000df 01d8      	MOVW R26,R16
0000e0 e0ea      	LDI  R30,LOW(10)
0000e1 e0f0      	LDI  R31,HIGH(10)
0000e2 d0db      	RCALL SUBOPT_0x0
0000e3 2e4e      	MOV  R4,R30
                 ; 0000 002A     rd = (count / 100) % 10;
0000e4 01d8      	MOVW R26,R16
0000e5 e6e4      	LDI  R30,LOW(100)
0000e6 e0f0      	LDI  R31,HIGH(100)
0000e7 d0d6      	RCALL SUBOPT_0x0
0000e8 2e7e      	MOV  R7,R30
                 ; 0000 002B     th = (count / 1000) % 10;
0000e9 01d8      	MOVW R26,R16
0000ea eee8      	LDI  R30,LOW(1000)
0000eb e0f3      	LDI  R31,HIGH(1000)
0000ec d0d1      	RCALL SUBOPT_0x0
0000ed 2e6e      	MOV  R6,R30
                 ; 0000 002C }
0000ee 9109      	LD   R16,Y+
0000ef 9119      	LD   R17,Y+
0000f0 91e9      	LD   R30,Y+
0000f1 bfef      	OUT  SREG,R30
0000f2 91f9      	LD   R31,Y+
0000f3 91e9      	LD   R30,Y+
0000f4 91b9      	LD   R27,Y+
0000f5 91a9      	LD   R26,Y+
0000f6 9199      	LD   R25,Y+
0000f7 9019      	LD   R1,Y+
0000f8 9009      	LD   R0,Y+
0000f9 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
0000fa e0ff          ldi   r31,15
                 __lcd_delay0:
0000fb 95fa          dec   r31
0000fc f7f1          brne  __lcd_delay0
0000fd 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0000fe b3a1          in    r26,__lcd_direction
0000ff 70af          andi  r26,0xf                 ;set as input
000100 bba1          out   __lcd_direction,r26
000101 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000102 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000103 dff6      	RCALL __lcd_delay_G100
000104 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000105 dff4      	RCALL __lcd_delay_G100
000106 b3a0          in    r26,__lcd_pin
000107 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000108 dff1      	RCALL __lcd_delay_G100
000109 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00010a dfef      	RCALL __lcd_delay_G100
00010b 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00010c fda7          sbrc  r26,__lcd_busy_flag
00010d cff5          rjmp  __lcd_busy
00010e 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00010f 7fa0          andi  r26,0xf0
000110 2bab          or    r26,r27
000111 bba2          out   __lcd_port,r26          ;write
000112 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000113 dfe6      	RCALL __lcd_delay_G100
000114 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000115 dfe4      	RCALL __lcd_delay_G100
000116 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000117 93aa      	ST   -Y,R26
000118 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000119 b3a1          in    r26,__lcd_direction
00011a 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00011b bba1          out   __lcd_direction,r26
00011c b3b2          in    r27,__lcd_port
00011d 70bf          andi  r27,0xf
00011e 81a8          ld    r26,y
00011f dfef      	RCALL __lcd_write_nibble_G100
000120 81a8          ld    r26,y
000121 95a2          swap  r26
000122 dfec      	RCALL __lcd_write_nibble_G100
000123 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000124 940c 01bc 	JMP  _0x2080001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000126 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000127 dfd2      	RCALL __lcd_delay_G100
000128 b3e0          in    r30,__lcd_pin           ;read
000129 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00012a dfcf      	RCALL __lcd_delay_G100
00012b 7fe0          andi  r30,0xf0
00012c 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
00012d dfcc      	RCALL __lcd_delay_G100
00012e dff7      	RCALL __lcd_read_nibble_G100
00012f 2fae          mov   r26,r30
000130 dff5      	RCALL __lcd_read_nibble_G100
000131 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
000132 95e2          swap  r30
000133 2bea          or    r30,r26
000134 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000135 93aa      	ST   -Y,R26
000136 dfc7      	RCALL __lcd_ready
000137 81e8      	LD   R30,Y
000138 e0f0      	LDI  R31,0
000139 50e0      	SUBI R30,LOW(-__base_y_G100)
00013a 4ffb      	SBCI R31,HIGH(-__base_y_G100)
00013b 81e0      	LD   R30,Z
00013c 81a9      	LDD  R26,Y+1
00013d 0fae      	ADD  R26,R30
00013e dfd8      	RCALL __lcd_write_data
00013f 8099      	LDD  R9,Y+1
000140 8088      	LDD  R8,Y+0
000141 9622      	ADIW R28,2
000142 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000143 dfba      	RCALL __lcd_ready
000144 e0a2      	LDI  R26,LOW(2)
000145 dfd1      	RCALL __lcd_write_data
000146 dfb7      	RCALL __lcd_ready
000147 e0ac      	LDI  R26,LOW(12)
000148 dfce      	RCALL __lcd_write_data
000149 dfb4      	RCALL __lcd_ready
00014a e0a1      	LDI  R26,LOW(1)
00014b dfcb      	RCALL __lcd_write_data
00014c e0e0      	LDI  R30,LOW(0)
00014d 2e8e      	MOV  R8,R30
00014e 2e9e      	MOV  R9,R30
00014f 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000150 93aa      	ST   -Y,R26
000151 93ef          push r30
000152 93ff          push r31
000153 81a8          ld   r26,y
000154 9468          set
000155 30aa          cpi  r26,10
000156 f019          breq __lcd_putchar1
000157 94e8          clt
000158 149b      	CP   R9,R11
000159 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
00015a 9483      	INC  R8
00015b e0e0      	LDI  R30,LOW(0)
00015c 93ea      	ST   -Y,R30
00015d 2da8      	MOV  R26,R8
00015e dfd6      	RCALL _lcd_gotoxy
00015f f02e      	brts __lcd_putchar0
                 _0x2000004:
000160 9493      	INC  R9
000161 df9c          rcall __lcd_ready
000162 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
000163 81a8      	LD   R26,Y
000164 dfb2      	RCALL __lcd_write_data
                 __lcd_putchar0:
000165 91ff          pop  r31
000166 91ef          pop  r30
000167 940c 01bc 	JMP  _0x2080001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000169 93ba      	ST   -Y,R27
00016a 93aa      	ST   -Y,R26
00016b 931a      	ST   -Y,R17
                 _0x2000008:
00016c 81e9      	LDD  R30,Y+1
00016d 81fa      	LDD  R31,Y+1+1
00016e 9631      	ADIW R30,1
00016f 83e9      	STD  Y+1,R30
000170 83fa      	STD  Y+1+1,R31
000171 9731      	SBIW R30,1
000172 91e4      	LPM  R30,Z
000173 2f1e      	MOV  R17,R30
000174 30e0      	CPI  R30,0
000175 f019      	BREQ _0x200000A
000176 2fa1      	MOV  R26,R17
000177 dfd8      	RCALL _lcd_putchar
000178 cff3      	RJMP _0x2000008
                 _0x200000A:
000179 8118      	LDD  R17,Y+0
00017a 9623      	ADIW R28,3
00017b 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00017c 27aa          clr   r26
00017d 27bb          clr   r27
                 __long_delay0:
00017e 9711          sbiw  r26,1         ;2 cycles
00017f f7f1          brne  __long_delay0 ;2 cycles
000180 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000181 93aa      	ST   -Y,R26
000182 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000183 b3a1          in    r26,__lcd_direction
000184 6fa7          ori   r26,0xf7                ;set as output
000185 bba1          out   __lcd_direction,r26
000186 b3b2          in    r27,__lcd_port
000187 70bf          andi  r27,0xf
000188 81a8          ld    r26,y
000189 df85      	RCALL __lcd_write_nibble_G100
00018a 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00018b c030      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00018c 93aa      	ST   -Y,R26
00018d 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00018e 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
00018f 80b8      	LDD  R11,Y+0
000190 81e8      	LD   R30,Y
000191 58e0      	SUBI R30,-LOW(128)
                +
000192 93e0 0502+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000194 81e8      	LD   R30,Y
000195 54e0      	SUBI R30,-LOW(192)
                +
000196 93e0 0503+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000198 dfe3      	RCALL __long_delay_G100
000199 e3a0      	LDI  R26,LOW(48)
00019a dfe6      	RCALL __lcd_init_write_G100
00019b dfe0      	RCALL __long_delay_G100
00019c e3a0      	LDI  R26,LOW(48)
00019d dfe3      	RCALL __lcd_init_write_G100
00019e dfdd      	RCALL __long_delay_G100
00019f e3a0      	LDI  R26,LOW(48)
0001a0 dfe0      	RCALL __lcd_init_write_G100
0001a1 dfda      	RCALL __long_delay_G100
0001a2 e2a0      	LDI  R26,LOW(32)
0001a3 dfdd      	RCALL __lcd_init_write_G100
0001a4 dfd7      	RCALL __long_delay_G100
0001a5 e2a8      	LDI  R26,LOW(40)
0001a6 df70      	RCALL __lcd_write_data
0001a7 dfd4      	RCALL __long_delay_G100
0001a8 e0a4      	LDI  R26,LOW(4)
0001a9 df6d      	RCALL __lcd_write_data
0001aa dfd1      	RCALL __long_delay_G100
0001ab e8a5      	LDI  R26,LOW(133)
0001ac df6a      	RCALL __lcd_write_data
0001ad dfce      	RCALL __long_delay_G100
0001ae b3a1          in    r26,__lcd_direction
0001af 70af          andi  r26,0xf                 ;set as input
0001b0 bba1          out   __lcd_direction,r26
0001b1 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0001b2 df7a      	RCALL _lcd_read_byte0_G100
0001b3 30e5      	CPI  R30,LOW(0x5)
0001b4 f011      	BREQ _0x200000B
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 c005      	RJMP _0x2080001
                 _0x200000B:
0001b7 df46      	RCALL __lcd_ready
0001b8 e0a6      	LDI  R26,LOW(6)
0001b9 df5d      	RCALL __lcd_write_data
0001ba df88      	RCALL _lcd_clear
0001bb e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
0001bc 9621      	ADIW R28,1
0001bd 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0001be d01c      	RCALL __DIVW21
0001bf 01df      	MOVW R26,R30
0001c0 e0ea      	LDI  R30,LOW(10)
0001c1 e0f0      	LDI  R31,HIGH(10)
0001c2 d01d      	RCALL __MODW21
0001c3 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
0001c4 95f1      	NEG  R31
0001c5 95e1      	NEG  R30
0001c6 40f0      	SBCI R31,0
0001c7 9508      	RET
                 
                 __DIVW21U:
0001c8 2400      	CLR  R0
0001c9 2411      	CLR  R1
0001ca e190      	LDI  R25,16
                 __DIVW21U1:
0001cb 0faa      	LSL  R26
0001cc 1fbb      	ROL  R27
0001cd 1c00      	ROL  R0
0001ce 1c11      	ROL  R1
0001cf 1a0e      	SUB  R0,R30
0001d0 0a1f      	SBC  R1,R31
0001d1 f418      	BRCC __DIVW21U2
0001d2 0e0e      	ADD  R0,R30
0001d3 1e1f      	ADC  R1,R31
0001d4 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001d5 60a1      	SBR  R26,1
                 __DIVW21U3:
0001d6 959a      	DEC  R25
0001d7 f799      	BRNE __DIVW21U1
0001d8 01fd      	MOVW R30,R26
0001d9 01d0      	MOVW R26,R0
0001da 9508      	RET
                 
                 __DIVW21:
0001db d012      	RCALL __CHKSIGNW
0001dc dfeb      	RCALL __DIVW21U
0001dd f40e      	BRTC __DIVW211
0001de dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001df 9508      	RET
                 
                 __MODW21:
0001e0 94e8      	CLT
0001e1 ffb7      	SBRS R27,7
0001e2 c004      	RJMP __MODW211
0001e3 95b1      	NEG  R27
0001e4 95a1      	NEG  R26
0001e5 40b0      	SBCI R27,0
0001e6 9468      	SET
                 __MODW211:
0001e7 fdf7      	SBRC R31,7
0001e8 dfdb      	RCALL __ANEGW1
0001e9 dfde      	RCALL __DIVW21U
0001ea 01fd      	MOVW R30,R26
0001eb f40e      	BRTC __MODW212
0001ec dfd7      	RCALL __ANEGW1
                 __MODW212:
0001ed 9508      	RET
                 
                 __CHKSIGNW:
0001ee 94e8      	CLT
0001ef fff7      	SBRS R31,7
0001f0 c002      	RJMP __CHKSW1
0001f1 dfd2      	RCALL __ANEGW1
0001f2 9468      	SET
                 __CHKSW1:
0001f3 ffb7      	SBRS R27,7
0001f4 c006      	RJMP __CHKSW2
0001f5 95b1      	NEG  R27
0001f6 95a1      	NEG  R26
0001f7 40b0      	SBCI R27,0
0001f8 f800      	BLD  R0,0
0001f9 9403      	INC  R0
0001fa fa00      	BST  R0,0
                 __CHKSW2:
0001fb 9508      	RET
                 
                 _delay_ms:
0001fc 9610      	adiw r26,0
0001fd f039      	breq __delay_ms1
                 __delay_ms0:
0001fe 95a8      	wdr
                +
0001ff ea80     +LDI R24 , LOW ( 0xFA0 )
000200 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000201 9701     +SBIW R24 , 1
000202 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000203 9711      	sbiw r26,1
000204 f7c9      	brne __delay_ms0
                 __delay_ms1:
000205 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   2 r5 :   2 r6 :   2 r7 :   2 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  10 r25:   7 r26:  83 r27:  22 r28:   4 r29:   1 r30:  88 r31:  26 
x  :   3 y  :  49 z  :   9 
Registers used: 23 out of 35 (65.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   5 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  11 inc   :   3 jmp   :  38 ld    :  19 ldd   :   7 
ldi   :  64 lds   :   0 lpm   :   9 lsl   :   1 lsr   :   0 mov   :  14 
movw  :  12 mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 
or    :   2 ori   :   2 out   :  18 pop   :   2 push  :   2 rcall :  71 
ret   :  18 reti  :   1 rjmp  :  11 rol   :   3 ror   :   0 sbc   :   1 
sbci  :   4 sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 
sbrc  :   2 sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  25 std   :   2 sts   :   4 sub   :   1 subi  :   7 
swap  :   2 tst   :   0 wdr   :   1 
Instructions used: 55 out of 117 (47.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00040c    978     58   1036  131072   0.8%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
