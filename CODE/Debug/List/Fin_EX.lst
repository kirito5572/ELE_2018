
AVRASM ver. 2.1.30  D:\ELE_2018\CODE\Debug\List\Fin_EX.asm Tue Jul 17 14:37:58 2018

D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1097): warning: Register r4 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1098): warning: Register r5 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1099): warning: Register r7 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1100): warning: Register r6 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1101): warning: Register r9 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1102): warning: Register r8 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1103): warning: Register r11 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\Fin_EX.asm(1104): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32a Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _scan=R7
                 	.DEF _data=R6
                 	.DEF _sum=R9
                 	.DEF _lcount=R8
                 	.DEF _sdata=R11
                 	.DEF _sta=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x3:
000046 2010
000047 8040      	.DB  0x10,0x20,0x40,0x80
                 
                 __GLOBAL_INI_TBL:
000048 0004      	.DW  0x04
000049 0500      	.DW  _key_scan
00004a 008c      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bff5      	OUT  MCUCR,R31
000051 bfe5      	OUT  MCUCR,R30
000052 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000054 e08d      	LDI  R24,(14-2)+1
000055 e0a2      	LDI  R26,2
000056 27bb      	CLR  R27
                 __CLEAR_REG:
000057 93ed      	ST   X+,R30
000058 958a      	DEC  R24
000059 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005b e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005c e0a0      	LDI  R26,LOW(__SRAM_START)
00005d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005e 93ed      	ST   X+,R30
00005f 9701      	SBIW R24,1
000060 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000061 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000062 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000063 9185      	LPM  R24,Z+
000064 9195      	LPM  R25,Z+
000065 9700      	SBIW R24,0
000066 f061      	BREQ __GLOBAL_INI_END
000067 91a5      	LPM  R26,Z+
000068 91b5      	LPM  R27,Z+
000069 9005      	LPM  R0,Z+
00006a 9015      	LPM  R1,Z+
00006b 01bf      	MOVW R22,R30
00006c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006d 9005      	LPM  R0,Z+
00006e 920d      	ST   X+,R0
00006f 9701      	SBIW R24,1
000070 f7e1      	BRNE __GLOBAL_INI_LOOP
000071 01fb      	MOVW R30,R22
000072 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000073 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000074 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000075 bfed      	OUT  SPL,R30
000076 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000077 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000078 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000079 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007a 940c 007c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;unsigned int count;
                 ;unsigned char key_scan[4] = {0x10, 0x20, 0x40, 0x80}, scan, data, sum, lcount, sdata, sta;
                 
                 	.DSEG
                 ;void FND();
                 ;void scanning();
                 ;void calculator();
                 ;void cls();
                 ;void main() {
                 ; 0000 0009 void main() {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000A     DDRA = 0xf0;
00007c efe0      	LDI  R30,LOW(240)
00007d bbea      	OUT  0x1A,R30
                 ; 0000 000B     DDRD = 0xff;
00007e efef      	LDI  R30,LOW(255)
00007f bbe1      	OUT  0x11,R30
                 ; 0000 000C     while(1) {
                 _0x4:
                 ; 0000 000D         if(sta == 0) {
000080 20aa      	TST  R10
000081 f409      	BRNE _0x7
                 ; 0000 000E             scanning();
000082 d096      	RCALL _scanning
                 ; 0000 000F         }
                 ; 0000 0010         if(sdata == 20 | sdata == 30) {
                 _0x7:
000083 2dab      	MOV  R26,R11
000084 e1e4      	LDI  R30,LOW(20)
000085 d160      	RCALL __EQB12
000086 2e0e      	MOV  R0,R30
000087 e1ee      	LDI  R30,LOW(30)
000088 d15d      	RCALL __EQB12
000089 29e0      	OR   R30,R0
00008a f051      	BREQ _0x8
                 ; 0000 0011             lcount = count;
00008b 2c84      	MOV  R8,R4
                 ; 0000 0012             count = 0;
00008c 2444      	CLR  R4
00008d 2455      	CLR  R5
                 ; 0000 0013             while(1) {
                 _0x9:
                 ; 0000 0014                 calculator();
00008e d011      	RCALL _calculator
                 ; 0000 0015                 FND();
00008f d0c7      	RCALL _FND
                 ; 0000 0016                 if(sum != 0) {
000090 2099      	TST  R9
000091 f011      	BREQ _0xC
                 ; 0000 0017                     cls();
000092 d0e9      	RCALL _cls
                 ; 0000 0018                     break;
000093 c001      	RJMP _0xB
                 ; 0000 0019                 }
                 ; 0000 001A             }
                 _0xC:
000094 cff9      	RJMP _0x9
                 _0xB:
                 ; 0000 001B         }
                 ; 0000 001C         FND();
                 _0x8:
000095 d0c1      	RCALL _FND
                 ; 0000 001D         if(sta == 1) {
000096 e0e1      	LDI  R30,LOW(1)
000097 15ea      	CP   R30,R10
000098 f429      	BRNE _0xD
                 ; 0000 001E             PORTA = key_scan[3];
                +
000099 91e0 0503+LDS R30 , _key_scan + ( 3 )
                 	__GETB1MN _key_scan,3
00009b bbeb      	OUT  0x1B,R30
                 ; 0000 001F             if(PINA.0 == 0) {
00009c 9bc8      	SBIS 0x19,0
                 ; 0000 0020                 sta = 0;
00009d 24aa      	CLR  R10
                 ; 0000 0021             }
                 ; 0000 0022         }
                 ; 0000 0023     }
                 _0xD:
00009e cfe1      	RJMP _0x4
                 ; 0000 0024 }
                 _0xF:
00009f cfff      	RJMP _0xF
                 ; .FEND
                 ;void calculator() {
                 ; 0000 0025 void calculator() {
                 _calculator:
                 ; .FSTART _calculator
                 ; 0000 0026     scan = ++scan % 4;
0000a0 d113      	RCALL SUBOPT_0x0
                 ; 0000 0027     switch(scan) {
                 ; 0000 0028         case 0: PORTA = key_scan[scan]; data = 1; break;
0000a1 f419      	BRNE _0x13
0000a2 d11b      	RCALL SUBOPT_0x1
0000a3 e0e1      	LDI  R30,LOW(1)
0000a4 c014      	RJMP _0x5B
                 ; 0000 0029         case 1: PORTA = key_scan[scan]; data = 4; break;
                 _0x13:
0000a5 30e1      	CPI  R30,LOW(0x1)
0000a6 e0a0      	LDI  R26,HIGH(0x1)
0000a7 07fa      	CPC  R31,R26
0000a8 f419      	BRNE _0x14
0000a9 d114      	RCALL SUBOPT_0x1
0000aa e0e4      	LDI  R30,LOW(4)
0000ab c00d      	RJMP _0x5B
                 ; 0000 002A         case 2: PORTA = key_scan[scan]; data = 7; break;
                 _0x14:
0000ac 30e2      	CPI  R30,LOW(0x2)
0000ad e0a0      	LDI  R26,HIGH(0x2)
0000ae 07fa      	CPC  R31,R26
0000af f419      	BRNE _0x15
0000b0 d10d      	RCALL SUBOPT_0x1
0000b1 e0e7      	LDI  R30,LOW(7)
0000b2 c006      	RJMP _0x5B
                 ; 0000 002B         case 3: PORTA = key_scan[scan]; data = 10; break;
                 _0x15:
0000b3 30e3      	CPI  R30,LOW(0x3)
0000b4 e0a0      	LDI  R26,HIGH(0x3)
0000b5 07fa      	CPC  R31,R26
0000b6 f419      	BRNE _0x12
0000b7 d106      	RCALL SUBOPT_0x1
0000b8 e0ea      	LDI  R30,LOW(10)
                 _0x5B:
0000b9 2e6e      	MOV  R6,R30
                 ; 0000 002C     }
                 _0x12:
                 ; 0000 002D     delay_ms(5);
0000ba e0a5      	LDI  R26,LOW(5)
0000bb e0b0      	LDI  R27,0
0000bc d16f      	RCALL _delay_ms
                 ; 0000 002E     if(PINA.0 == 1) {
0000bd 9bc8      	SBIS 0x19,0
0000be c01e      	RJMP _0x17
                 ; 0000 002F         if(sdata == 20 && data != 10) {
0000bf e1e4      	LDI  R30,LOW(20)
0000c0 15eb      	CP   R30,R11
0000c1 f419      	BRNE _0x19
0000c2 e0ea      	LDI  R30,LOW(10)
0000c3 15e6      	CP   R30,R6
0000c4 f409      	BRNE _0x1A
                 _0x19:
0000c5 c006      	RJMP _0x18
                 _0x1A:
                 ; 0000 0030             count = data;
0000c6 2c46      	MOV  R4,R6
0000c7 2455      	CLR  R5
                 ; 0000 0031             sum = lcount + count;
0000c8 2de4      	MOV  R30,R4
0000c9 0de8      	ADD  R30,R8
0000ca 2e9e      	MOV  R9,R30
                 ; 0000 0032         } else if (sdata == 30 && data != 10) {
0000cb c010      	RJMP _0x1B
                 _0x18:
0000cc e1ee      	LDI  R30,LOW(30)
0000cd 15eb      	CP   R30,R11
0000ce f419      	BRNE _0x1D
0000cf e0ea      	LDI  R30,LOW(10)
0000d0 15e6      	CP   R30,R6
0000d1 f409      	BRNE _0x1E
                 _0x1D:
0000d2 c004      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0033             sum = lcount - count;
0000d3 2de8      	MOV  R30,R8
0000d4 19e4      	SUB  R30,R4
0000d5 2e9e      	MOV  R9,R30
                 ; 0000 0034         } else if (data == 10){
0000d6 c005      	RJMP _0x1F
                 _0x1C:
0000d7 e0ea      	LDI  R30,LOW(10)
0000d8 15e6      	CP   R30,R6
0000d9 f011      	BREQ _0x21
                 ; 0000 0035 
                 ; 0000 0036         } else {
                 ; 0000 0037             count = data;
0000da 2c46      	MOV  R4,R6
0000db 2455      	CLR  R5
                 ; 0000 0038         }
                 _0x21:
                 _0x1F:
                 _0x1B:
                 ; 0000 0039     } else if(PINA.1 == 1) {
0000dc c03b      	RJMP _0x22
                 _0x17:
0000dd 9bc9      	SBIS 0x19,1
0000de c01c      	RJMP _0x23
                 ; 0000 003A         if(sdata == 20 && data != 10) {
0000df e1e4      	LDI  R30,LOW(20)
0000e0 15eb      	CP   R30,R11
0000e1 f419      	BRNE _0x25
0000e2 e0ea      	LDI  R30,LOW(10)
0000e3 15e6      	CP   R30,R6
0000e4 f409      	BRNE _0x26
                 _0x25:
0000e5 c005      	RJMP _0x24
                 _0x26:
                 ; 0000 003B             count = data + 1;
0000e6 d0de      	RCALL SUBOPT_0x2
                 ; 0000 003C             sum = lcount + count;
0000e7 2de4      	MOV  R30,R4
0000e8 0de8      	ADD  R30,R8
0000e9 2e9e      	MOV  R9,R30
                 ; 0000 003D         } else if (sdata == 30 && data != 10) {
0000ea c00f      	RJMP _0x27
                 _0x24:
0000eb e1ee      	LDI  R30,LOW(30)
0000ec 15eb      	CP   R30,R11
0000ed f419      	BRNE _0x29
0000ee e0ea      	LDI  R30,LOW(10)
0000ef 15e6      	CP   R30,R6
0000f0 f409      	BRNE _0x2A
                 _0x29:
0000f1 c004      	RJMP _0x28
                 _0x2A:
                 ; 0000 003E             sum = lcount - count;
0000f2 2de8      	MOV  R30,R8
0000f3 19e4      	SUB  R30,R4
0000f4 2e9e      	MOV  R9,R30
                 ; 0000 003F         } else if (data == 10){
0000f5 c004      	RJMP _0x2B
                 _0x28:
0000f6 e0ea      	LDI  R30,LOW(10)
0000f7 15e6      	CP   R30,R6
0000f8 f009      	BREQ _0x2D
                 ; 0000 0040 
                 ; 0000 0041         } else {
                 ; 0000 0042             count = 1 + data;
0000f9 d0cb      	RCALL SUBOPT_0x2
                 ; 0000 0043         }
                 _0x2D:
                 _0x2B:
                 _0x27:
                 ; 0000 0044     } else if(PINA.2 == 1) {
0000fa c01d      	RJMP _0x2E
                 _0x23:
0000fb 9bca      	SBIS 0x19,2
0000fc c01b      	RJMP _0x2F
                 ; 0000 0045         if(sdata == 20 && data != 10) {
0000fd e1e4      	LDI  R30,LOW(20)
0000fe 15eb      	CP   R30,R11
0000ff f419      	BRNE _0x31
000100 e0ea      	LDI  R30,LOW(10)
000101 15e6      	CP   R30,R6
000102 f409      	BRNE _0x32
                 _0x31:
000103 c005      	RJMP _0x30
                 _0x32:
                 ; 0000 0046             count = data + 2;
000104 d0c5      	RCALL SUBOPT_0x3
                 ; 0000 0047             sum = lcount + count;
000105 2de4      	MOV  R30,R4
000106 0de8      	ADD  R30,R8
000107 2e9e      	MOV  R9,R30
                 ; 0000 0048         } else if (sdata == 30 && data != 10) {
000108 c00f      	RJMP _0x33
                 _0x30:
000109 e1ee      	LDI  R30,LOW(30)
00010a 15eb      	CP   R30,R11
00010b f419      	BRNE _0x35
00010c e0ea      	LDI  R30,LOW(10)
00010d 15e6      	CP   R30,R6
00010e f409      	BRNE _0x36
                 _0x35:
00010f c004      	RJMP _0x34
                 _0x36:
                 ; 0000 0049             sum = lcount - count;
000110 2de8      	MOV  R30,R8
000111 19e4      	SUB  R30,R4
000112 2e9e      	MOV  R9,R30
                 ; 0000 004A         } else if (data == 10){
000113 c004      	RJMP _0x37
                 _0x34:
000114 e0ea      	LDI  R30,LOW(10)
000115 15e6      	CP   R30,R6
000116 f009      	BREQ _0x39
                 ; 0000 004B 
                 ; 0000 004C         } else {
                 ; 0000 004D             count = 2 + data;
000117 d0b2      	RCALL SUBOPT_0x3
                 ; 0000 004E         }
                 _0x39:
                 _0x37:
                 _0x33:
                 ; 0000 004F     }
                 ; 0000 0050 }
                 _0x2F:
                 _0x2E:
                 _0x22:
000118 9508      	RET
                 ; .FEND
                 ;void scanning() {
                 ; 0000 0051 void scanning() {
                 _scanning:
                 ; .FSTART _scanning
                 ; 0000 0052     scan = ++scan % 4;
000119 d09a      	RCALL SUBOPT_0x0
                 ; 0000 0053     switch(scan) {
                 ; 0000 0054         case 0: PORTA = key_scan[scan]; data = 1; break;
00011a f419      	BRNE _0x3D
00011b d0a2      	RCALL SUBOPT_0x1
00011c e0e1      	LDI  R30,LOW(1)
00011d c014      	RJMP _0x5C
                 ; 0000 0055         case 1: PORTA = key_scan[scan]; data = 4; break;
                 _0x3D:
00011e 30e1      	CPI  R30,LOW(0x1)
00011f e0a0      	LDI  R26,HIGH(0x1)
000120 07fa      	CPC  R31,R26
000121 f419      	BRNE _0x3E
000122 d09b      	RCALL SUBOPT_0x1
000123 e0e4      	LDI  R30,LOW(4)
000124 c00d      	RJMP _0x5C
                 ; 0000 0056         case 2: PORTA = key_scan[scan]; data = 7; break;
                 _0x3E:
000125 30e2      	CPI  R30,LOW(0x2)
000126 e0a0      	LDI  R26,HIGH(0x2)
000127 07fa      	CPC  R31,R26
000128 f419      	BRNE _0x3F
000129 d094      	RCALL SUBOPT_0x1
00012a e0e7      	LDI  R30,LOW(7)
00012b c006      	RJMP _0x5C
                 ; 0000 0057         case 3: PORTA = key_scan[scan]; data = 10; break;
                 _0x3F:
00012c 30e3      	CPI  R30,LOW(0x3)
00012d e0a0      	LDI  R26,HIGH(0x3)
00012e 07fa      	CPC  R31,R26
00012f f419      	BRNE _0x3C
000130 d08d      	RCALL SUBOPT_0x1
000131 e0ea      	LDI  R30,LOW(10)
                 _0x5C:
000132 2e6e      	MOV  R6,R30
                 ; 0000 0058     }
                 _0x3C:
                 ; 0000 0059     delay_ms(5);
000133 e0a5      	LDI  R26,LOW(5)
000134 e0b0      	LDI  R27,0
000135 d0f6      	RCALL _delay_ms
                 ; 0000 005A     if(PINA.0 == 1) {
000136 9bc8      	SBIS 0x19,0
000137 c009      	RJMP _0x41
                 ; 0000 005B         if(data == 10) {
000138 e0ea      	LDI  R30,LOW(10)
000139 15e6      	CP   R30,R6
00013a f419      	BRNE _0x42
                 ; 0000 005C             sdata = 20;
00013b e1e4      	LDI  R30,LOW(20)
00013c 2ebe      	MOV  R11,R30
                 ; 0000 005D         }
                 ; 0000 005E         else {
00013d c002      	RJMP _0x43
                 _0x42:
                 ; 0000 005F             count = data;
00013e 2c46      	MOV  R4,R6
00013f 2455      	CLR  R5
                 ; 0000 0060         }
                 _0x43:
                 ; 0000 0061     } else if(PINA.1 == 1) {
000140 c015      	RJMP _0x44
                 _0x41:
000141 9bc9      	SBIS 0x19,1
000142 c007      	RJMP _0x45
                 ; 0000 0062         count = 1 + data;
000143 d081      	RCALL SUBOPT_0x2
                 ; 0000 0063         if(data == 10) {
000144 e0ea      	LDI  R30,LOW(10)
000145 15e6      	CP   R30,R6
000146 f411      	BRNE _0x46
                 ; 0000 0064             count = 0;
000147 2444      	CLR  R4
000148 2455      	CLR  R5
                 ; 0000 0065         }
                 ; 0000 0066     } else if(PINA.2 == 1) {
                 _0x46:
000149 c00c      	RJMP _0x47
                 _0x45:
00014a 9bca      	SBIS 0x19,2
00014b c008      	RJMP _0x48
                 ; 0000 0067         if(data == 10) {
00014c e0ea      	LDI  R30,LOW(10)
00014d 15e6      	CP   R30,R6
00014e f419      	BRNE _0x49
                 ; 0000 0068             sdata = 30;
00014f e1ee      	LDI  R30,LOW(30)
000150 2ebe      	MOV  R11,R30
                 ; 0000 0069         } else {
000151 c001      	RJMP _0x4A
                 _0x49:
                 ; 0000 006A             count = 2 + data;
000152 d077      	RCALL SUBOPT_0x3
                 ; 0000 006B         }
                 _0x4A:
                 ; 0000 006C     } else {
000153 c002      	RJMP _0x4B
                 _0x48:
                 ; 0000 006D         sdata = 40;
000154 e2e8      	LDI  R30,LOW(40)
000155 2ebe      	MOV  R11,R30
                 ; 0000 006E     }
                 _0x4B:
                 _0x47:
                 _0x44:
                 ; 0000 006F }
000156 9508      	RET
                 ; .FEND
                 ;void FND() {
                 ; 0000 0070 void FND() {
                 _FND:
                 ; .FSTART _FND
                 ; 0000 0071     unsigned char st,nd,rd,th;
                 ; 0000 0072     st = count % 10;
000157 d080      	RCALL __SAVELOCR4
                 ;	st -> R17
                 ;	nd -> R16
                 ;	rd -> R19
                 ;	th -> R18
000158 01d2      	MOVW R26,R4
000159 e0ea      	LDI  R30,LOW(10)
00015a e0f0      	LDI  R31,HIGH(10)
00015b d0a7      	RCALL __MODW21U
00015c 2f1e      	MOV  R17,R30
                 ; 0000 0073     nd = lcount % 10;
00015d 2da8      	MOV  R26,R8
00015e d070      	RCALL SUBOPT_0x4
00015f 2f0e      	MOV  R16,R30
                 ; 0000 0074     rd = sum % 10;
000160 2da9      	MOV  R26,R9
000161 d06d      	RCALL SUBOPT_0x4
000162 2f3e      	MOV  R19,R30
                 ; 0000 0075     th = (sum / 10) % 10;
000163 2da9      	MOV  R26,R9
000164 e0b0      	LDI  R27,0
000165 e0ea      	LDI  R30,LOW(10)
000166 e0f0      	LDI  R31,HIGH(10)
000167 d096      	RCALL __DIVW21
000168 01df      	MOVW R26,R30
000169 e0ea      	LDI  R30,LOW(10)
00016a e0f0      	LDI  R31,HIGH(10)
00016b d09a      	RCALL __MODW21
00016c 2f2e      	MOV  R18,R30
                 ; 0000 0076     PORTD = 0x70 | st;
00016d 2fe1      	MOV  R30,R17
00016e 67e0      	ORI  R30,LOW(0x70)
00016f d064      	RCALL SUBOPT_0x5
                 ; 0000 0077     delay_ms(5);
                 ; 0000 0078     PORTD = 0xb0 | nd;
000170 2fe0      	MOV  R30,R16
000171 6be0      	ORI  R30,LOW(0xB0)
000172 d061      	RCALL SUBOPT_0x5
                 ; 0000 0079     delay_ms(5);
                 ; 0000 007A     PORTD = 0xd0 | rd;
000173 2fe3      	MOV  R30,R19
000174 6de0      	ORI  R30,LOW(0xD0)
000175 d05e      	RCALL SUBOPT_0x5
                 ; 0000 007B     delay_ms(5);
                 ; 0000 007C     PORTD = 0xe0 | th;
000176 2fe2      	MOV  R30,R18
000177 6ee0      	ORI  R30,LOW(0xE0)
000178 d05b      	RCALL SUBOPT_0x5
                 ; 0000 007D     delay_ms(5);
                 ; 0000 007E }
000179 d063      	RCALL __LOADLOCR4
00017a 9624      	ADIW R28,4
00017b 9508      	RET
                 ; .FEND
                 ;void cls() {
                 ; 0000 007F void cls() {
                 _cls:
                 ; .FSTART _cls
                 ; 0000 0080     while(sta == 0) {
                 _0x4C:
00017c 20aa      	TST  R10
00017d f571      	BRNE _0x4E
                 ; 0000 0081         scan = ++scan % 4;
00017e d035      	RCALL SUBOPT_0x0
                 ; 0000 0082         switch(scan) {
                 ; 0000 0083             case 0: PORTA = key_scan[scan]; data = 1; break;
00017f f419      	BRNE _0x52
000180 d03d      	RCALL SUBOPT_0x1
000181 e0e1      	LDI  R30,LOW(1)
000182 c014      	RJMP _0x5D
                 ; 0000 0084             case 1: PORTA = key_scan[scan]; data = 4; break;
                 _0x52:
000183 30e1      	CPI  R30,LOW(0x1)
000184 e0a0      	LDI  R26,HIGH(0x1)
000185 07fa      	CPC  R31,R26
000186 f419      	BRNE _0x53
000187 d036      	RCALL SUBOPT_0x1
000188 e0e4      	LDI  R30,LOW(4)
000189 c00d      	RJMP _0x5D
                 ; 0000 0085             case 2: PORTA = key_scan[scan]; data = 7; break;
                 _0x53:
00018a 30e2      	CPI  R30,LOW(0x2)
00018b e0a0      	LDI  R26,HIGH(0x2)
00018c 07fa      	CPC  R31,R26
00018d f419      	BRNE _0x54
00018e d02f      	RCALL SUBOPT_0x1
00018f e0e7      	LDI  R30,LOW(7)
000190 c006      	RJMP _0x5D
                 ; 0000 0086             case 3: PORTA = key_scan[scan]; data = 10; break;
                 _0x54:
000191 30e3      	CPI  R30,LOW(0x3)
000192 e0a0      	LDI  R26,HIGH(0x3)
000193 07fa      	CPC  R31,R26
000194 f419      	BRNE _0x51
000195 d028      	RCALL SUBOPT_0x1
000196 e0ea      	LDI  R30,LOW(10)
                 _0x5D:
000197 2e6e      	MOV  R6,R30
                 ; 0000 0087         }
                 _0x51:
                 ; 0000 0088         delay_ms(5);
000198 e0a5      	LDI  R26,LOW(5)
000199 e0b0      	LDI  R27,0
00019a d091      	RCALL _delay_ms
                 ; 0000 0089         if(PINA.0 == 1) {
00019b 9bc8      	SBIS 0x19,0
00019c c006      	RJMP _0x56
                 ; 0000 008A             if(data == 10) {
00019d e0ea      	LDI  R30,LOW(10)
00019e 15e6      	CP   R30,R6
00019f f411      	BRNE _0x57
                 ; 0000 008B                 sta = 1;
0001a0 e0e1      	LDI  R30,LOW(1)
0001a1 2eae      	MOV  R10,R30
                 ; 0000 008C             }
                 ; 0000 008D         } else if(PINA.2 == 1) {
                 _0x57:
0001a2 c007      	RJMP _0x58
                 _0x56:
0001a3 9bca      	SBIS 0x19,2
0001a4 c005      	RJMP _0x59
                 ; 0000 008E             if(data == 10) {
0001a5 e0ea      	LDI  R30,LOW(10)
0001a6 15e6      	CP   R30,R6
0001a7 f411      	BRNE _0x5A
                 ; 0000 008F                 sta = 1;
0001a8 e0e1      	LDI  R30,LOW(1)
0001a9 2eae      	MOV  R10,R30
                 ; 0000 0090             }
                 ; 0000 0091         } FND();
                 _0x5A:
                 _0x59:
                 _0x58:
0001aa dfac      	RCALL _FND
                 ; 0000 0092     }
0001ab cfd0      	RJMP _0x4C
                 _0x4E:
                 ; 0000 0093     scan = 0;
0001ac 2477      	CLR  R7
                 ; 0000 0094     data = 0;
0001ad 2466      	CLR  R6
                 ; 0000 0095     sum = 0;
0001ae 2499      	CLR  R9
                 ; 0000 0096     lcount = 0;
0001af 2488      	CLR  R8
                 ; 0000 0097     sdata = 0;
0001b0 24bb      	CLR  R11
                 ; 0000 0098     count = 0;
0001b1 2444      	CLR  R4
0001b2 2455      	CLR  R5
                 ; 0000 0099 }
0001b3 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _key_scan:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x0:
0001b4 9473      	INC  R7
0001b5 2de7      	MOV  R30,R7
0001b6 e0f0      	LDI  R31,0
0001b7 e0a3      	LDI  R26,LOW(3)
0001b8 e0b0      	LDI  R27,HIGH(3)
0001b9 d05a      	RCALL __MANDW12
0001ba 2e7e      	MOV  R7,R30
0001bb e0f0      	LDI  R31,0
0001bc 9730      	SBIW R30,0
0001bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x1:
0001be 2de7      	MOV  R30,R7
0001bf e0f0      	LDI  R31,0
0001c0 50e0      	SUBI R30,LOW(-_key_scan)
0001c1 4ffb      	SBCI R31,HIGH(-_key_scan)
0001c2 81e0      	LD   R30,Z
0001c3 bbeb      	OUT  0x1B,R30
0001c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0001c5 2de6      	MOV  R30,R6
0001c6 e0f0      	LDI  R31,0
0001c7 9631      	ADIW R30,1
0001c8 012f      	MOVW R4,R30
0001c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0001ca 2de6      	MOV  R30,R6
0001cb e0f0      	LDI  R31,0
0001cc 9632      	ADIW R30,2
0001cd 012f      	MOVW R4,R30
0001ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0001cf 27bb      	CLR  R27
0001d0 e0ea      	LDI  R30,LOW(10)
0001d1 e0f0      	LDI  R31,HIGH(10)
0001d2 d033      	RCALL __MODW21
0001d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
0001d4 bbe2      	OUT  0x12,R30
0001d5 e0a5      	LDI  R26,LOW(5)
0001d6 e0b0      	LDI  R27,0
0001d7 c054      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0001d8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001d9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001da 931a      	ST   -Y,R17
0001db 930a      	ST   -Y,R16
0001dc 9508      	RET
                 
                 __LOADLOCR4:
0001dd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001de 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001df 8119      	LDD  R17,Y+1
0001e0 8108      	LD   R16,Y
0001e1 9508      	RET
                 
                 __ANEGW1:
0001e2 95f1      	NEG  R31
0001e3 95e1      	NEG  R30
0001e4 40f0      	SBCI R31,0
0001e5 9508      	RET
                 
                 __EQB12:
0001e6 17ea      	CP   R30,R26
0001e7 e0e1      	LDI  R30,1
0001e8 f009      	BREQ __EQB12T
0001e9 27ee      	CLR  R30
                 __EQB12T:
0001ea 9508      	RET
                 
                 __DIVW21U:
0001eb 2400      	CLR  R0
0001ec 2411      	CLR  R1
0001ed e190      	LDI  R25,16
                 __DIVW21U1:
0001ee 0faa      	LSL  R26
0001ef 1fbb      	ROL  R27
0001f0 1c00      	ROL  R0
0001f1 1c11      	ROL  R1
0001f2 1a0e      	SUB  R0,R30
0001f3 0a1f      	SBC  R1,R31
0001f4 f418      	BRCC __DIVW21U2
0001f5 0e0e      	ADD  R0,R30
0001f6 1e1f      	ADC  R1,R31
0001f7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001f8 60a1      	SBR  R26,1
                 __DIVW21U3:
0001f9 959a      	DEC  R25
0001fa f799      	BRNE __DIVW21U1
0001fb 01fd      	MOVW R30,R26
0001fc 01d0      	MOVW R26,R0
0001fd 9508      	RET
                 
                 __DIVW21:
0001fe d01f      	RCALL __CHKSIGNW
0001ff dfeb      	RCALL __DIVW21U
000200 f40e      	BRTC __DIVW211
000201 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000202 9508      	RET
                 
                 __MODW21U:
000203 dfe7      	RCALL __DIVW21U
000204 01fd      	MOVW R30,R26
000205 9508      	RET
                 
                 __MODW21:
000206 94e8      	CLT
000207 ffb7      	SBRS R27,7
000208 c004      	RJMP __MODW211
000209 95b1      	NEG  R27
00020a 95a1      	NEG  R26
00020b 40b0      	SBCI R27,0
00020c 9468      	SET
                 __MODW211:
00020d fdf7      	SBRC R31,7
00020e dfd3      	RCALL __ANEGW1
00020f dfdb      	RCALL __DIVW21U
000210 01fd      	MOVW R30,R26
000211 f40e      	BRTC __MODW212
000212 dfcf      	RCALL __ANEGW1
                 __MODW212:
000213 9508      	RET
                 
                 __MANDW12:
000214 94e8      	CLT
000215 fff7      	SBRS R31,7
000216 c002      	RJMP __MANDW121
000217 dfca      	RCALL __ANEGW1
000218 9468      	SET
                 __MANDW121:
000219 23ea      	AND  R30,R26
00021a 23fb      	AND  R31,R27
00021b f40e      	BRTC __MANDW122
00021c dfc5      	RCALL __ANEGW1
                 __MANDW122:
00021d 9508      	RET
                 
                 __CHKSIGNW:
00021e 94e8      	CLT
00021f fff7      	SBRS R31,7
000220 c002      	RJMP __CHKSW1
000221 dfc0      	RCALL __ANEGW1
000222 9468      	SET
                 __CHKSW1:
000223 ffb7      	SBRS R27,7
000224 c006      	RJMP __CHKSW2
000225 95b1      	NEG  R27
000226 95a1      	NEG  R26
000227 40b0      	SBCI R27,0
000228 f800      	BLD  R0,0
000229 9403      	INC  R0
00022a fa00      	BST  R0,0
                 __CHKSW2:
00022b 9508      	RET
                 
                 _delay_ms:
00022c 9610      	adiw r26,0
00022d f039      	breq __delay_ms1
                 __delay_ms0:
00022e 95a8      	wdr
                +
00022f ed80     +LDI R24 , LOW ( 0x7D0 )
000230 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000231 9701     +SBIW R24 , 1
000232 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000233 9711      	sbiw r26,1
000234 f7c9      	brne __delay_ms0
                 __delay_ms1:
000235 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :  16 r5 :   6 r6 :  23 r7 :   5 
r8 :   9 r9 :  10 r10:   6 r11:  11 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   4 r18:   4 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  10 r25:   5 r26:  44 r27:  18 r28:   2 r29:   1 r30: 159 r31:  30 
x  :   3 y  :   8 z  :   8 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :   4 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  38 brpl  :   0 brsh  :   0 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   0 
cp    :  22 cpc   :   9 cpi   :   9 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   2 jmp   :  36 ld    :   2 ldd   :   3 
ldi   :  92 lds   :   1 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  42 
movw  :  11 mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 
or    :   1 ori   :   4 out   :  11 pop   :   0 push  :   0 rcall :  55 
ret   :  20 reti  :   0 rjmp  :  49 rol   :   3 ror   :   0 sbc   :   1 
sbci  :   4 sbi   :   0 sbic  :   0 sbis  :   9 sbiw  :   6 sbr   :   1 
sbrc  :   1 sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   7 std   :   0 sts   :   1 sub   :   4 subi  :   1 
swap  :   0 tst   :   3 wdr   :   1 
Instructions used: 49 out of 117 (41.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00046c   1120     12   1132  131072   0.9%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
