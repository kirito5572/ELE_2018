
AVRASM ver. 2.1.30  D:\ELE_2018\CODE\Debug\List\SPI.asm Thu Nov 08 10:57:54 2018

D:\ELE_2018\CODE\Debug\List\SPI.asm(1097): warning: Register r4 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1098): warning: Register r5 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1099): warning: Register r6 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1100): warning: Register r7 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1101): warning: Register r8 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1102): warning: Register r9 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1103): warning: Register r11 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1104): warning: Register r10 already defined by the .DEF directive
D:\ELE_2018\CODE\Debug\List\SPI.asm(1105): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32a Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temp1=R4
                 	.DEF _temp1_msb=R5
                 	.DEF _temp2=R6
                 	.DEF _temp2_msb=R7
                 	.DEF _temp=R8
                 	.DEF _temp_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0056 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 5053
000050 0049      	.DB  0x53,0x50,0x49,0x0
                 _0x2020003:
000051 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000052 0002      	.DW  0x02
000053 0500      	.DW  __base_y_G101
000054 00a2      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000055 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000056 94f8      	CLI
000057 27ee      	CLR  R30
000058 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000059 e0f1      	LDI  R31,1
00005a bff5      	OUT  MCUCR,R31
00005b bfe5      	OUT  MCUCR,R30
00005c 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00005e e08d      	LDI  R24,(14-2)+1
00005f e0a2      	LDI  R26,2
000060 27bb      	CLR  R27
                 __CLEAR_REG:
000061 93ed      	ST   X+,R30
000062 958a      	DEC  R24
000063 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000064 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000065 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000066 e0a0      	LDI  R26,LOW(__SRAM_START)
000067 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00007d bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 0086 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;unsigned int temp1, temp2;
                 ;unsigned int temp;
                 ;void main(void) {
                 ; 0000 0007 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0008     // SPI initialization
                 ; 0000 0009     // SPI Type: Master
                 ; 0000 000A     // SPI Clock Rate: 125.000 kHz
                 ; 0000 000B     // SPI Clock Phase: Cycle Start
                 ; 0000 000C     // SPI Clock Polarity: Low
                 ; 0000 000D     // SPI Data Order: MSB First
                 ; 0000 000E     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
000086 e5e3      	LDI  R30,LOW(83)
000087 b9ed      	OUT  0xD,R30
                 ; 0000 000F     SPSR=(0<<SPI2X);
000088 e0e0      	LDI  R30,LOW(0)
000089 b9ee      	OUT  0xE,R30
                 ; 0000 0010     DDRB = 0x0f;
00008a e0ef      	LDI  R30,LOW(15)
00008b bbe7      	OUT  0x17,R30
                 ; 0000 0011     DDRD = 0xff;
00008c efef      	LDI  R30,LOW(255)
00008d bbe1      	OUT  0x11,R30
                 ; 0000 0012     lcd_init(16);
00008e e1a0      	LDI  R26,LOW(16)
00008f d0a5      	RCALL _lcd_init
                 ; 0000 0013     lcd_clear();
000090 d078      	RCALL _lcd_clear
                 ; 0000 0014     lcd_gotoxy(6,0);
000091 e0e6      	LDI  R30,LOW(6)
000092 93ea      	ST   -Y,R30
000093 e0a0      	LDI  R26,LOW(0)
000094 d062      	RCALL _lcd_gotoxy
                 ; 0000 0015     lcd_putsf("SPI");
                +
000095 e9ae     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000096 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000097 d08e      	RCALL _lcd_putsf
                 ; 0000 0016     while (1) {
                 _0x3:
                 ; 0000 0017         temp1 = 0;
000098 2444      	CLR  R4
000099 2455      	CLR  R5
                 ; 0000 0018         temp2 = 0;
00009a 2466      	CLR  R6
00009b 2477      	CLR  R7
                 ; 0000 0019         PORTB.0 = 0;
00009c 98c0      	CBI  0x18,0
                 ; 0000 001A         SPDR = 0xff;
00009d efef      	LDI  R30,LOW(255)
00009e b9ef      	OUT  0xF,R30
                 ; 0000 001B         while(!(SPSR & 0x80));
                 _0x8:
00009f 9b77      	SBIS 0xE,7
0000a0 cffe      	RJMP _0x8
                 ; 0000 001C         temp1 = SPDR;
0000a1 b04f      	IN   R4,15
0000a2 2455      	CLR  R5
                 ; 0000 001D         temp2 = SPDR;
0000a3 b06f      	IN   R6,15
0000a4 2477      	CLR  R7
                 ; 0000 001E         delay_ms(1);
0000a5 e0a1      	LDI  R26,LOW(1)
0000a6 e0b0      	LDI  R27,0
0000a7 d239      	RCALL _delay_ms
                 ; 0000 001F         PORTB.0 = 1;
0000a8 9ac0      	SBI  0x18,0
                 ; 0000 0020         temp = 0;
0000a9 2488      	CLR  R8
0000aa 2499      	CLR  R9
                 ; 0000 0021         temp = ((temp1 << 8) & 0xff00) | (temp2 & 0x00ff);
0000ab 2db4      	MOV  R27,R4
0000ac e0a0      	LDI  R26,LOW(0)
0000ad 01f3      	MOVW R30,R6
0000ae 70f0      	ANDI R31,HIGH(0xFF)
0000af 2bea      	OR   R30,R26
0000b0 2bfb      	OR   R31,R27
0000b1 014f      	MOVW R8,R30
                 ; 0000 0022         temp = (((temp >> 3) * 0.0625) + 0.5);
0000b2 d0d6      	RCALL __LSRW3
0000b3 2766      	CLR  R22
0000b4 2777      	CLR  R23
0000b5 d15b      	RCALL __CDF1
                +
0000b6 e0a0     +LDI R26 , LOW ( 0x3D800000 )
0000b7 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
0000b8 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
0000b9 e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
0000ba d1d8      	RCALL __MULF12
                +
0000bb e0a0     +LDI R26 , LOW ( 0x3F000000 )
0000bc e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0000bd e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0000be e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0000bf d184      	RCALL __ADDF12
0000c0 d117      	RCALL __CFD1U
0000c1 014f      	MOVW R8,R30
                 ; 0000 0023         lcd_gotoxy(6,1);
0000c2 e0e6      	LDI  R30,LOW(6)
0000c3 93ea      	ST   -Y,R30
0000c4 e0a1      	LDI  R26,LOW(1)
0000c5 d031      	RCALL _lcd_gotoxy
                 ; 0000 0024         lcd_putchar((temp/100)%10 + '0');
0000c6 01d4      	MOVW R26,R8
0000c7 e6e4      	LDI  R30,LOW(100)
0000c8 e0f0      	LDI  R31,HIGH(100)
0000c9 d096      	RCALL SUBOPT_0x0
                 ; 0000 0025         lcd_putchar((temp/10)%10 + '0');
0000ca d095      	RCALL SUBOPT_0x0
                 ; 0000 0026         lcd_putchar(temp%10 + '0');
0000cb d0dc      	RCALL __MODW21U
0000cc 5de0      	SUBI R30,-LOW(48)
0000cd 2fae      	MOV  R26,R30
0000ce d044      	RCALL _lcd_putchar
                 ; 0000 0027         delay_ms(1);
0000cf e0a1      	LDI  R26,LOW(1)
0000d0 e0b0      	LDI  R27,0
0000d1 d20f      	RCALL _delay_ms
                 ; 0000 0028     }
0000d2 cfc5      	RJMP _0x3
                 ; 0000 0029 }
                 _0xD:
0000d3 cfff      	RJMP _0xD
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0000d4 931a      	ST   -Y,R17
0000d5 2f1a      	MOV  R17,R26
0000d6 b3e2      	IN   R30,0x12
0000d7 70ef      	ANDI R30,LOW(0xF)
0000d8 2fae      	MOV  R26,R30
0000d9 2fe1      	MOV  R30,R17
0000da 7fe0      	ANDI R30,LOW(0xF0)
0000db 2bea      	OR   R30,R26
0000dc bbe2      	OUT  0x12,R30
                +
0000dd e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000de 958a     +DEC R24
0000df f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000e0 9a92      	SBI  0x12,2
                +
0000e1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000e2 958a     +DEC R24
0000e3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000e4 9892      	CBI  0x12,2
                +
0000e5 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000e6 958a     +DEC R24
0000e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000e8 c075      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000e9 93aa      	ST   -Y,R26
0000ea 81a8      	LD   R26,Y
0000eb dfe8      	RCALL __lcd_write_nibble_G101
0000ec 81e8          ld    r30,y
0000ed 95e2          swap  r30
0000ee 83e8          st    y,r30
0000ef 81a8      	LD   R26,Y
0000f0 dfe3      	RCALL __lcd_write_nibble_G101
                +
0000f1 ec88     +LDI R24 , LOW ( 200 )
0000f2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0000f3 9701     +SBIW R24 , 1
0000f4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0000f5 9621      	ADIW R28,1
0000f6 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000f7 931a      	ST   -Y,R17
0000f8 930a      	ST   -Y,R16
0000f9 2f1a      	MOV  R17,R26
0000fa 810a      	LDD  R16,Y+2
0000fb 2fe1      	MOV  R30,R17
0000fc e0f0      	LDI  R31,0
0000fd 50e0      	SUBI R30,LOW(-__base_y_G101)
0000fe 4ffb      	SBCI R31,HIGH(-__base_y_G101)
0000ff 81e0      	LD   R30,Z
000100 0fe0      	ADD  R30,R16
000101 2fae      	MOV  R26,R30
000102 dfe6      	RCALL __lcd_write_data
000103 2eb0      	MOV  R11,R16
000104 2ea1      	MOV  R10,R17
000105 8119      	LDD  R17,Y+1
000106 8108      	LDD  R16,Y+0
000107 9623      	ADIW R28,3
000108 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000109 e0a2      	LDI  R26,LOW(2)
00010a d061      	RCALL SUBOPT_0x1
00010b e0ac      	LDI  R26,LOW(12)
00010c dfdc      	RCALL __lcd_write_data
00010d e0a1      	LDI  R26,LOW(1)
00010e d05d      	RCALL SUBOPT_0x1
00010f e0e0      	LDI  R30,LOW(0)
000110 2eae      	MOV  R10,R30
000111 2ebe      	MOV  R11,R30
000112 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000113 931a      	ST   -Y,R17
000114 2f1a      	MOV  R17,R26
000115 301a      	CPI  R17,10
000116 f011      	BREQ _0x2020005
000117 14bd      	CP   R11,R13
000118 f038      	BRLO _0x2020004
                 _0x2020005:
000119 e0e0      	LDI  R30,LOW(0)
00011a 93ea      	ST   -Y,R30
00011b 94a3      	INC  R10
00011c 2daa      	MOV  R26,R10
00011d dfd9      	RCALL _lcd_gotoxy
00011e 301a      	CPI  R17,10
00011f f1f1      	BREQ _0x20A0001
                 _0x2020004:
000120 94b3      	INC  R11
000121 9a90      	SBI  0x12,0
000122 2fa1      	MOV  R26,R17
000123 dfc5      	RCALL __lcd_write_data
000124 9890      	CBI  0x12,0
000125 c038      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000126 d050      	RCALL __SAVELOCR4
000127 019d      	MOVW R18,R26
                 _0x202000B:
000128 01f9      	MOVW R30,R18
                +
000129 5f2f     +SUBI R18 , LOW ( - 1 )
00012a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00012b 91e4      	LPM  R30,Z
00012c 2f1e      	MOV  R17,R30
00012d 30e0      	CPI  R30,0
00012e f019      	BREQ _0x202000D
00012f 2fa1      	MOV  R26,R17
000130 dfe2      	RCALL _lcd_putchar
000131 cff6      	RJMP _0x202000B
                 _0x202000D:
000132 d049      	RCALL __LOADLOCR4
000133 9624      	ADIW R28,4
000134 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000135 931a      	ST   -Y,R17
000136 2f1a      	MOV  R17,R26
000137 b3e1      	IN   R30,0x11
000138 6fe0      	ORI  R30,LOW(0xF0)
000139 bbe1      	OUT  0x11,R30
00013a 9a8a      	SBI  0x11,2
00013b 9a88      	SBI  0x11,0
00013c 9a89      	SBI  0x11,1
00013d 9892      	CBI  0x12,2
00013e 9890      	CBI  0x12,0
00013f 9891      	CBI  0x12,1
000140 2ed1      	MOV  R13,R17
000141 2fe1      	MOV  R30,R17
000142 58e0      	SUBI R30,-LOW(128)
                +
000143 93e0 0502+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000145 2fe1      	MOV  R30,R17
000146 54e0      	SUBI R30,-LOW(192)
                +
000147 93e0 0503+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000149 e1a4      	LDI  R26,LOW(20)
00014a e0b0      	LDI  R27,0
00014b d195      	RCALL _delay_ms
00014c d023      	RCALL SUBOPT_0x2
00014d d022      	RCALL SUBOPT_0x2
00014e d021      	RCALL SUBOPT_0x2
00014f e2a0      	LDI  R26,LOW(32)
000150 df83      	RCALL __lcd_write_nibble_G101
                +
000151 e980     +LDI R24 , LOW ( 400 )
000152 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000153 9701     +SBIW R24 , 1
000154 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000155 e2a8      	LDI  R26,LOW(40)
000156 df92      	RCALL __lcd_write_data
000157 e0a4      	LDI  R26,LOW(4)
000158 df90      	RCALL __lcd_write_data
000159 e8a5      	LDI  R26,LOW(133)
00015a df8e      	RCALL __lcd_write_data
00015b e0a6      	LDI  R26,LOW(6)
00015c df8c      	RCALL __lcd_write_data
00015d dfab      	RCALL _lcd_clear
                 _0x20A0001:
00015e 9119      	LD   R17,Y+
00015f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
000160 d034      	RCALL __DIVW21U
000161 01df      	MOVW R26,R30
000162 e0ea      	LDI  R30,LOW(10)
000163 e0f0      	LDI  R31,HIGH(10)
000164 d043      	RCALL __MODW21U
000165 5de0      	SUBI R30,-LOW(48)
000166 2fae      	MOV  R26,R30
000167 dfab      	RCALL _lcd_putchar
000168 01d4      	MOVW R26,R8
000169 e0ea      	LDI  R30,LOW(10)
00016a e0f0      	LDI  R31,HIGH(10)
00016b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00016c df7c      	RCALL __lcd_write_data
00016d e0a3      	LDI  R26,LOW(3)
00016e e0b0      	LDI  R27,0
00016f c171      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000170 e3a0      	LDI  R26,LOW(48)
000171 df62      	RCALL __lcd_write_nibble_G101
                +
000172 e980     +LDI R24 , LOW ( 400 )
000173 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000174 9701     +SBIW R24 , 1
000175 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000176 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000177 933a      	ST   -Y,R19
                 __SAVELOCR3:
000178 932a      	ST   -Y,R18
                 __SAVELOCR2:
000179 931a      	ST   -Y,R17
00017a 930a      	ST   -Y,R16
00017b 9508      	RET
                 
                 __LOADLOCR4:
00017c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00017d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00017e 8119      	LDD  R17,Y+1
00017f 8108      	LD   R16,Y
000180 9508      	RET
                 
                 __ANEGD1:
000181 95f0      	COM  R31
000182 9560      	COM  R22
000183 9570      	COM  R23
000184 95e1      	NEG  R30
000185 4fff      	SBCI R31,-1
000186 4f6f      	SBCI R22,-1
000187 4f7f      	SBCI R23,-1
000188 9508      	RET
                 
                 __LSRW3:
000189 95f6      	LSR  R31
00018a 95e7      	ROR  R30
                 __LSRW2:
00018b 95f6      	LSR  R31
00018c 95e7      	ROR  R30
00018d 95f6      	LSR  R31
00018e 95e7      	ROR  R30
00018f 9508      	RET
                 
                 __CWD1:
000190 2f6f      	MOV  R22,R31
000191 0f66      	ADD  R22,R22
000192 0b66      	SBC  R22,R22
000193 2f76      	MOV  R23,R22
000194 9508      	RET
                 
                 __DIVW21U:
000195 2400      	CLR  R0
000196 2411      	CLR  R1
000197 e190      	LDI  R25,16
                 __DIVW21U1:
000198 0faa      	LSL  R26
000199 1fbb      	ROL  R27
00019a 1c00      	ROL  R0
00019b 1c11      	ROL  R1
00019c 1a0e      	SUB  R0,R30
00019d 0a1f      	SBC  R1,R31
00019e f418      	BRCC __DIVW21U2
00019f 0e0e      	ADD  R0,R30
0001a0 1e1f      	ADC  R1,R31
0001a1 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001a2 60a1      	SBR  R26,1
                 __DIVW21U3:
0001a3 959a      	DEC  R25
0001a4 f799      	BRNE __DIVW21U1
0001a5 01fd      	MOVW R30,R26
0001a6 01d0      	MOVW R26,R0
0001a7 9508      	RET
                 
                 __MODW21U:
0001a8 dfec      	RCALL __DIVW21U
0001a9 01fd      	MOVW R30,R26
0001aa 9508      	RET
                 
                 __ROUND_REPACK:
0001ab 2355      	TST  R21
0001ac f442      	BRPL __REPACK
0001ad 3850      	CPI  R21,0x80
0001ae f411      	BRNE __ROUND_REPACK0
0001af ffe0      	SBRS R30,0
0001b0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0001b1 9631      	ADIW R30,1
0001b2 1f69      	ADC  R22,R25
0001b3 1f79      	ADC  R23,R25
0001b4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0001b5 e850      	LDI  R21,0x80
0001b6 2757      	EOR  R21,R23
0001b7 f411      	BRNE __REPACK0
0001b8 935f      	PUSH R21
0001b9 c0c8      	RJMP __ZERORES
                 __REPACK0:
0001ba 3f5f      	CPI  R21,0xFF
0001bb f031      	BREQ __REPACK1
0001bc 0f66      	LSL  R22
0001bd 0c00      	LSL  R0
0001be 9557      	ROR  R21
0001bf 9567      	ROR  R22
0001c0 2f75      	MOV  R23,R21
0001c1 9508      	RET
                 __REPACK1:
0001c2 935f      	PUSH R21
0001c3 2000      	TST  R0
0001c4 f00a      	BRMI __REPACK2
0001c5 c0c7      	RJMP __MAXRES
                 __REPACK2:
0001c6 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
0001c7 e850      	LDI  R21,0x80
0001c8 2e19      	MOV  R1,R25
0001c9 2215      	AND  R1,R21
0001ca 0f88      	LSL  R24
0001cb 1f99      	ROL  R25
0001cc 2795      	EOR  R25,R21
0001cd 0f55      	LSL  R21
0001ce 9587      	ROR  R24
                 
                 __UNPACK1:
0001cf e850      	LDI  R21,0x80
0001d0 2e07      	MOV  R0,R23
0001d1 2205      	AND  R0,R21
0001d2 0f66      	LSL  R22
0001d3 1f77      	ROL  R23
0001d4 2775      	EOR  R23,R21
0001d5 0f55      	LSL  R21
0001d6 9567      	ROR  R22
0001d7 9508      	RET
                 
                 __CFD1U:
0001d8 9468      	SET
0001d9 c001      	RJMP __CFD1U0
                 __CFD1:
0001da 94e8      	CLT
                 __CFD1U0:
0001db 935f      	PUSH R21
0001dc dff2      	RCALL __UNPACK1
0001dd 3870      	CPI  R23,0x80
0001de f018      	BRLO __CFD10
0001df 3f7f      	CPI  R23,0xFF
0001e0 f408      	BRCC __CFD10
0001e1 c0a0      	RJMP __ZERORES
                 __CFD10:
0001e2 e156      	LDI  R21,22
0001e3 1b57      	SUB  R21,R23
0001e4 f4aa      	BRPL __CFD11
0001e5 9551      	NEG  R21
0001e6 3058      	CPI  R21,8
0001e7 f40e      	BRTC __CFD19
0001e8 3059      	CPI  R21,9
                 __CFD19:
0001e9 f030      	BRLO __CFD17
0001ea efef      	SER  R30
0001eb efff      	SER  R31
0001ec ef6f      	SER  R22
0001ed e77f      	LDI  R23,0x7F
0001ee f977      	BLD  R23,7
0001ef c01a      	RJMP __CFD15
                 __CFD17:
0001f0 2777      	CLR  R23
0001f1 2355      	TST  R21
0001f2 f0b9      	BREQ __CFD15
                 __CFD18:
0001f3 0fee      	LSL  R30
0001f4 1fff      	ROL  R31
0001f5 1f66      	ROL  R22
0001f6 1f77      	ROL  R23
0001f7 955a      	DEC  R21
0001f8 f7d1      	BRNE __CFD18
0001f9 c010      	RJMP __CFD15
                 __CFD11:
0001fa 2777      	CLR  R23
                 __CFD12:
0001fb 3058      	CPI  R21,8
0001fc f028      	BRLO __CFD13
0001fd 2fef      	MOV  R30,R31
0001fe 2ff6      	MOV  R31,R22
0001ff 2f67      	MOV  R22,R23
000200 5058      	SUBI R21,8
000201 cff9      	RJMP __CFD12
                 __CFD13:
000202 2355      	TST  R21
000203 f031      	BREQ __CFD15
                 __CFD14:
000204 9576      	LSR  R23
000205 9567      	ROR  R22
000206 95f7      	ROR  R31
000207 95e7      	ROR  R30
000208 955a      	DEC  R21
000209 f7d1      	BRNE __CFD14
                 __CFD15:
00020a 2000      	TST  R0
00020b f40a      	BRPL __CFD16
00020c df74      	RCALL __ANEGD1
                 __CFD16:
00020d 915f      	POP  R21
00020e 9508      	RET
                 
                 __CDF1U:
00020f 9468      	SET
000210 c001      	RJMP __CDF1U0
                 __CDF1:
000211 94e8      	CLT
                 __CDF1U0:
000212 9730      	SBIW R30,0
000213 4060      	SBCI R22,0
000214 4070      	SBCI R23,0
000215 f0b1      	BREQ __CDF10
000216 2400      	CLR  R0
000217 f026      	BRTS __CDF11
000218 2377      	TST  R23
000219 f412      	BRPL __CDF11
00021a 9400      	COM  R0
00021b df65      	RCALL __ANEGD1
                 __CDF11:
00021c 2e17      	MOV  R1,R23
00021d e17e      	LDI  R23,30
00021e 2011      	TST  R1
                 __CDF12:
00021f f032      	BRMI __CDF13
000220 957a      	DEC  R23
000221 0fee      	LSL  R30
000222 1fff      	ROL  R31
000223 1f66      	ROL  R22
000224 1c11      	ROL  R1
000225 cff9      	RJMP __CDF12
                 __CDF13:
000226 2fef      	MOV  R30,R31
000227 2ff6      	MOV  R31,R22
000228 2d61      	MOV  R22,R1
000229 935f      	PUSH R21
00022a df8a      	RCALL __REPACK
00022b 915f      	POP  R21
                 __CDF10:
00022c 9508      	RET
                 
                 __SWAPACC:
00022d 934f      	PUSH R20
00022e 01af      	MOVW R20,R30
00022f 01fd      	MOVW R30,R26
000230 01da      	MOVW R26,R20
000231 01ab      	MOVW R20,R22
000232 01bc      	MOVW R22,R24
000233 01ca      	MOVW R24,R20
000234 2d40      	MOV  R20,R0
000235 2c01      	MOV  R0,R1
000236 2e14      	MOV  R1,R20
000237 914f      	POP  R20
000238 9508      	RET
                 
                 __UADD12:
000239 0fea      	ADD  R30,R26
00023a 1ffb      	ADC  R31,R27
00023b 1f68      	ADC  R22,R24
00023c 9508      	RET
                 
                 __NEGMAN1:
00023d 95e0      	COM  R30
00023e 95f0      	COM  R31
00023f 9560      	COM  R22
000240 5fef      	SUBI R30,-1
000241 4fff      	SBCI R31,-1
000242 4f6f      	SBCI R22,-1
000243 9508      	RET
                 
                 __ADDF12:
000244 935f      	PUSH R21
000245 df81      	RCALL __UNPACK
000246 3890      	CPI  R25,0x80
000247 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000248 3870      	CPI  R23,0x80
000249 f121      	BREQ __ADDF128
                 __ADDF121:
00024a 2f57      	MOV  R21,R23
00024b 1b59      	SUB  R21,R25
00024c f12b      	BRVS __ADDF1211
00024d f412      	BRPL __ADDF122
00024e dfde      	RCALL __SWAPACC
00024f cffa      	RJMP __ADDF121
                 __ADDF122:
000250 3158      	CPI  R21,24
000251 f018      	BRLO __ADDF123
000252 27aa      	CLR  R26
000253 27bb      	CLR  R27
000254 2788      	CLR  R24
                 __ADDF123:
000255 3058      	CPI  R21,8
000256 f028      	BRLO __ADDF124
000257 2fab      	MOV  R26,R27
000258 2fb8      	MOV  R27,R24
000259 2788      	CLR  R24
00025a 5058      	SUBI R21,8
00025b cff9      	RJMP __ADDF123
                 __ADDF124:
00025c 2355      	TST  R21
00025d f029      	BREQ __ADDF126
                 __ADDF125:
00025e 9586      	LSR  R24
00025f 95b7      	ROR  R27
000260 95a7      	ROR  R26
000261 955a      	DEC  R21
000262 f7d9      	BRNE __ADDF125
                 __ADDF126:
000263 2d50      	MOV  R21,R0
000264 2551      	EOR  R21,R1
000265 f072      	BRMI __ADDF127
000266 dfd2      	RCALL __UADD12
000267 f438      	BRCC __ADDF129
000268 9567      	ROR  R22
000269 95f7      	ROR  R31
00026a 95e7      	ROR  R30
00026b 9573      	INC  R23
00026c f413      	BRVC __ADDF129
00026d c01f      	RJMP __MAXRES
                 __ADDF128:
00026e dfbe      	RCALL __SWAPACC
                 __ADDF129:
00026f df45      	RCALL __REPACK
000270 915f      	POP  R21
000271 9508      	RET
                 __ADDF1211:
000272 f7d8      	BRCC __ADDF128
000273 cffb      	RJMP __ADDF129
                 __ADDF127:
000274 1bea      	SUB  R30,R26
000275 0bfb      	SBC  R31,R27
000276 0b68      	SBC  R22,R24
000277 f051      	BREQ __ZERORES
000278 f410      	BRCC __ADDF1210
000279 9400      	COM  R0
00027a dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00027b 2366      	TST  R22
00027c f392      	BRMI __ADDF129
00027d 0fee      	LSL  R30
00027e 1fff      	ROL  R31
00027f 1f66      	ROL  R22
000280 957a      	DEC  R23
000281 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000282 27ee      	CLR  R30
000283 27ff      	CLR  R31
000284 01bf      	MOVW R22,R30
000285 915f      	POP  R21
000286 9508      	RET
                 
                 __MINRES:
000287 efef      	SER  R30
000288 efff      	SER  R31
000289 e76f      	LDI  R22,0x7F
00028a ef7f      	SER  R23
00028b 915f      	POP  R21
00028c 9508      	RET
                 
                 __MAXRES:
00028d efef      	SER  R30
00028e efff      	SER  R31
00028f e76f      	LDI  R22,0x7F
000290 e77f      	LDI  R23,0x7F
000291 915f      	POP  R21
000292 9508      	RET
                 
                 __MULF12:
000293 935f      	PUSH R21
000294 df32      	RCALL __UNPACK
000295 3870      	CPI  R23,0x80
000296 f359      	BREQ __ZERORES
000297 3890      	CPI  R25,0x80
000298 f349      	BREQ __ZERORES
000299 2401      	EOR  R0,R1
00029a 9408      	SEC
00029b 1f79      	ADC  R23,R25
00029c f423      	BRVC __MULF124
00029d f324      	BRLT __ZERORES
                 __MULF125:
00029e 2000      	TST  R0
00029f f33a      	BRMI __MINRES
0002a0 cfec      	RJMP __MAXRES
                 __MULF124:
0002a1 920f      	PUSH R0
0002a2 931f      	PUSH R17
0002a3 932f      	PUSH R18
0002a4 933f      	PUSH R19
0002a5 934f      	PUSH R20
0002a6 2711      	CLR  R17
0002a7 2722      	CLR  R18
0002a8 2799      	CLR  R25
0002a9 9f68      	MUL  R22,R24
0002aa 01a0      	MOVW R20,R0
0002ab 9f8f      	MUL  R24,R31
0002ac 2d30      	MOV  R19,R0
0002ad 0d41      	ADD  R20,R1
0002ae 1f59      	ADC  R21,R25
0002af 9f6b      	MUL  R22,R27
0002b0 0d30      	ADD  R19,R0
0002b1 1d41      	ADC  R20,R1
0002b2 1f59      	ADC  R21,R25
0002b3 9f8e      	MUL  R24,R30
0002b4 d027      	RCALL __MULF126
0002b5 9fbf      	MUL  R27,R31
0002b6 d025      	RCALL __MULF126
0002b7 9f6a      	MUL  R22,R26
0002b8 d023      	RCALL __MULF126
0002b9 9fbe      	MUL  R27,R30
0002ba d01d      	RCALL __MULF127
0002bb 9faf      	MUL  R26,R31
0002bc d01b      	RCALL __MULF127
0002bd 9fae      	MUL  R26,R30
0002be 0d11      	ADD  R17,R1
0002bf 1f29      	ADC  R18,R25
0002c0 1f39      	ADC  R19,R25
0002c1 1f49      	ADC  R20,R25
0002c2 1f59      	ADC  R21,R25
0002c3 2fe3      	MOV  R30,R19
0002c4 2ff4      	MOV  R31,R20
0002c5 2f65      	MOV  R22,R21
0002c6 2f52      	MOV  R21,R18
0002c7 914f      	POP  R20
0002c8 913f      	POP  R19
0002c9 912f      	POP  R18
0002ca 911f      	POP  R17
0002cb 900f      	POP  R0
0002cc 2366      	TST  R22
0002cd f02a      	BRMI __MULF122
0002ce 0f55      	LSL  R21
0002cf 1fee      	ROL  R30
0002d0 1fff      	ROL  R31
0002d1 1f66      	ROL  R22
0002d2 c002      	RJMP __MULF123
                 __MULF122:
0002d3 9573      	INC  R23
0002d4 f24b      	BRVS __MULF125
                 __MULF123:
0002d5 ded5      	RCALL __ROUND_REPACK
0002d6 915f      	POP  R21
0002d7 9508      	RET
                 
                 __MULF127:
0002d8 0d10      	ADD  R17,R0
0002d9 1d21      	ADC  R18,R1
0002da 1f39      	ADC  R19,R25
0002db c002      	RJMP __MULF128
                 __MULF126:
0002dc 0d20      	ADD  R18,R0
0002dd 1d31      	ADC  R19,R1
                 __MULF128:
0002de 1f49      	ADC  R20,R25
0002df 1f59      	ADC  R21,R25
0002e0 9508      	RET
                 
                 _delay_ms:
0002e1 9610      	adiw r26,0
0002e2 f039      	breq __delay_ms1
                 __delay_ms0:
0002e3 95a8      	wdr
                +
0002e4 ea80     +LDI R24 , LOW ( 0xFA0 )
0002e5 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0002e6 9701     +SBIW R24 , 1
0002e7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0002e8 9711      	sbiw r26,1
0002e9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ea 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  29 r1 :  20 r2 :   0 r3 :   0 r4 :   3 r5 :   2 r6 :   3 r7 :   2 
r8 :   5 r9 :   1 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   0 
r16:   7 r17:  28 r18:  12 r19:  11 r20:  16 r21:  55 r22:  43 r23:  34 
r24:  37 r25:  29 r26:  60 r27:  22 r28:   4 r29:   1 r30: 107 r31:  40 
x  :   3 y  :  25 z  :   9 
Registers used: 30 out of 35 (85.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   5 and   :   2 andi  :   3 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   6 brne  :  17 brpl  :   5 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :   0 cpi   :  16 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   4 inc   :   4 jmp   :  36 ld    :   6 ldd   :   6 
ldi   :  81 lds   :   0 lpm   :   9 lsl   :  11 lsr   :   5 mov   :  46 
movw  :  22 mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   3 ori   :   1 out   :  13 pop   :  13 push  :  12 rcall :  60 
ret   :  28 reti  :   0 rjmp  :  27 rol   :  16 ror   :  15 sbc   :   4 
sbci  :   9 sbi   :   6 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   1 
sbrc  :   0 sbrs  :   1 sec   :   1 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  17 std   :   0 sts   :   3 sub   :   4 subi  :   9 
swap  :   1 tst   :  11 wdr   :   1 
Instructions used: 66 out of 117 (56.4%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005d6   1462     32   1494  131072   1.1%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
