;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <spi.h>
;#include <delay.h>
;unsigned char master_data, slave_data = 0xff, tmp;
;void main(void) {
; 0000 0005 void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0006     // SPI initialization
; 0000 0007     // SPI Type: Slave
; 0000 0008     // SPI Clock Rate: 4000.000 kHz
; 0000 0009     // SPI Clock Phase: Cycle Start
; 0000 000A     // SPI Clock Polarity: Low
; 0000 000B     // SPI Data Order: MSB First
; 0000 000C     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000D     SPSR=(0<<SPI2X);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000E     TCCR0 = 0x47;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000F     TCNT0 = 0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0010     TIMSK = 0x01;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0011     SREG = 0x80;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0012     DDRA = 0xff;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0013     DDRB = 0x0f;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0014     while (1) {
;PCODE: $0000001E VOL: 0
; 0000 0015         master_data = SPDR;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0016         delay_ms(1);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0017         SPDR = slave_data;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0018         PORTA = master_data;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0019         while(!(SPSR & 0x80));
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001A     }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001B }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;interrupt [TIM0_OVF] void change(void) {
; 0000 001C interrupt [17] void change(void) {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001D     tmp++;
;PCODE: $00000035 VOL: 0
; 0000 001E     if(tmp == 10) {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 001F         slave_data = slave_data ^ 0xff;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0020         tmp = 0;
;PCODE: $0000003C VOL: 0
; 0000 0021     }
; 0000 0022 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
