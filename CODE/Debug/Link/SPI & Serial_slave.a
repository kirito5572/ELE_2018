;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// SPI functions
;#include <spi.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;char SPI_SlaveReceive(void);
;
;unsigned char x, y;
;
;void main(void)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0010 
; 0000 0011     // SPI initialization
; 0000 0012     // SPI Type: Slave
; 0000 0013     // SPI Clock Rate: 125.000 kHz
; 0000 0014     // SPI Clock Phase: Cycle Start
; 0000 0015     // SPI Clock Polarity: Low
; 0000 0016     // SPI Data Order: MSB First
; 0000 0017     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0018     SPSR=(0<<SPI2X);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019 
; 0000 001A     // Alphanumeric LCD initialization
; 0000 001B     // Connections are specified in the
; 0000 001C     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 001D     // RS - PORTA Bit 0
; 0000 001E     // RD - PORTA Bit 1
; 0000 001F     // EN - PORTA Bit 2
; 0000 0020     // D4 - PORTA Bit 4
; 0000 0021     // D5 - PORTA Bit 5
; 0000 0022     // D6 - PORTA Bit 6
; 0000 0023     // D7 - PORTA Bit 7
; 0000 0024     // Characters/line: 16
; 0000 0025     lcd_init(16);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0026 
; 0000 0027     while (1) {
;PCODE: $00000014 VOL: 0
; 0000 0028         unsigned char data;
; 0000 0029         data = SPI_SlaveReceive();
;PCODE: $00000015 VOL: 0
;	data -> Y+0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002A         if(x == 16) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B             x = 0;
;PCODE: $0000001B VOL: 0
; 0000 002C             y++;
;PCODE: $0000001C VOL: 0
; 0000 002D             if(y == 2) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002E                 y = 0;
;PCODE: $00000020 VOL: 0
; 0000 002F                 lcd_clear();
;PCODE: $00000021 VOL: 0
; 0000 0030             }
; 0000 0031         }
;PCODE: $00000022 VOL: 0
; 0000 0032         if(data == 0x08) { //backspace
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0033             x--;
;PCODE: $00000027 VOL: 0
; 0000 0034             if(x > 250 ) x = 0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0035             lcd_gotoxy(x,y);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0036             lcd_putchar(data);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0037             x--;
;PCODE: $00000032 VOL: 0
; 0000 0038         }
; 0000 0039         else {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003A             lcd_gotoxy(x,y);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003B             lcd_putchar(data);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003C         }
;PCODE: $0000003A VOL: 0
; 0000 003D         x++;
;PCODE: $0000003B VOL: 0
; 0000 003E         if(data == 0x0d) { //enter
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003F             y++;
;PCODE: $0000003F VOL: 0
; 0000 0040             x = 0;
;PCODE: $00000040 VOL: 0
; 0000 0041             if(y == 2) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0042                 y = 0;
;PCODE: $00000044 VOL: 0
; 0000 0043                 lcd_clear();
;PCODE: $00000045 VOL: 0
; 0000 0044             }
; 0000 0045         }
;PCODE: $00000046 VOL: 0
; 0000 0046         else if(data == 0x1b) { //esc
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0047             x = 0;
;PCODE: $0000004C VOL: 0
; 0000 0048             y = 0;
;PCODE: $0000004D VOL: 0
; 0000 0049             lcd_clear();
;PCODE: $0000004E VOL: 0
; 0000 004A         }
; 0000 004B     }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004C }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;char SPI_SlaveReceive(void) {
; 0000 004D char SPI_SlaveReceive(void) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004E     /* Wait for reception complete */
; 0000 004F     while(!(SPSR & (1<<SPIF)))
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0050     ;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0051 
; 0000 0052     /* Return data register */
; 0000 0053     return SPDR;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0054 }
;PCODE: $00000061 VOL: 0
