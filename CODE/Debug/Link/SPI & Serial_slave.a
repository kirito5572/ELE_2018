;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// SPI functions
;#include <spi.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;char SPI_SlaveReceive(void);         //char형을 반환하는 함수
;
;unsigned char x, y;        //lcd의 x,y를 결정하는 함수
;
;void main(void)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0010 
; 0000 0011     //위저드 설정
; 0000 0012 
; 0000 0013     // SPI 초기화
; 0000 0014     // SPI 타입: Slave
; 0000 0015     // SPI 클럭 속도: 125.000 kHz
; 0000 0016     // SPI Clock Phase: Cycle Start
; 0000 0017     // SPI Clock Polarity: Low
; 0000 0018     // SPI Data Order: MSB First
; 0000 0019     SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001A     SPSR=(0<<SPI2X);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001B 
; 0000 001C     // Alphanumeric LCD initialization
; 0000 001D     // Connections are specified in the
; 0000 001E     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 001F     // RS - PORTA Bit 0
; 0000 0020     // RD - PORTA Bit 1
; 0000 0021     // EN - PORTA Bit 2
; 0000 0022     // D4 - PORTA Bit 4
; 0000 0023     // D5 - PORTA Bit 5
; 0000 0024     // D6 - PORTA Bit 6
; 0000 0025     // D7 - PORTA Bit 7
; 0000 0026     // Characters/line: 16
; 0000 0027 
; 0000 0028     //LCD는 포트A에 연결
; 0000 0029     //asm을 사용했을경우 0x12가 아닌 0x1b를 넣으면 PORTD가 아닌 PORTA로 설정됨. 자세한 사항은 mega128.h참조
; 0000 002A     lcd_init(16);               //LCD 초기화
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002B 
; 0000 002C     while (1) {
;PCODE: $00000014 VOL: 0
; 0000 002D         unsigned char data;      //전송받은 데이터를 넣을 변수 선언
; 0000 002E         data = SPI_SlaveReceive();          //데이터 수신
;PCODE: $00000015 VOL: 0
;	data -> Y+0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002F         if(x == 16) {                       //X열 Y열 설정
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030             x = 0;                          //X열이 16이상 없으므로 16이 될경우 y를 0->1 혹은 1->0으로만 변경
;PCODE: $0000001B VOL: 0
; 0000 0031             y++;                            //하면 되므로, x가 16일때 y가 1증가하며 y가 2를 넘지 않으므로 2가
;PCODE: $0000001C VOL: 0
; 0000 0032             if(y == 2) {                    //되면 y도 0이 되며 LCD가 초기화 된다.
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0033                 y = 0;
;PCODE: $00000020 VOL: 0
; 0000 0034                 lcd_clear();
;PCODE: $00000021 VOL: 0
; 0000 0035             }
; 0000 0036         }
;PCODE: $00000022 VOL: 0
; 0000 0037         if(data == 0x08) { //backspace
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0038             x--;                            //BACKSPACE키를 누를경우 LCD화면에서도 BACKSPACE기능이 동작하도록
;PCODE: $00000027 VOL: 0
; 0000 0039             if(x > 250 ) x = 0;             //짠 코드이나, 수행에는 이런거 안나오니 공부 안할꺼면 넘어가도됨
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003A             lcd_gotoxy(x,y);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003B             lcd_putchar(data);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003C             x--;
;PCODE: $00000032 VOL: 0
; 0000 003D         }
; 0000 003E         else {                              //BACKSPACE이외의 코드가 들어온 경우(문자가 입력되야 하는 경우)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003F             lcd_gotoxy(x,y);                //X,Y 위치 설정
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0040             lcd_putchar(data);              //데이터 출력
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0041         }
;PCODE: $0000003A VOL: 0
; 0000 0042 
; 0000 0043         x++;                                //문자가 입력됬으니, X값을 증가시켜서 다음칸에 문자가 입력되게 해야함.
;PCODE: $0000003B VOL: 0
; 0000 0044 
; 0000 0045         if(data == 0x0d) { //enter
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0046             y++;                            //ENTER키를 누를경우 X값에 상관없이 다음줄로 넘어가도록 하는 코드
;PCODE: $0000003F VOL: 0
; 0000 0047             x = 0;                          //이 코드 역시 수행에는 영향이 없다.
;PCODE: $00000040 VOL: 0
; 0000 0048             if(y == 2) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0049                 y = 0;
;PCODE: $00000044 VOL: 0
; 0000 004A                 lcd_clear();
;PCODE: $00000045 VOL: 0
; 0000 004B             }
; 0000 004C         }
;PCODE: $00000046 VOL: 0
; 0000 004D         else if(data == 0x1b) { //esc
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004E             x = 0;                          //ESC키를 누를경우 어느위치던지, LCD가 리셋되게 하는 코드
;PCODE: $0000004C VOL: 0
; 0000 004F             y = 0;                          //이 코드 역시 수행에는 영향이 없다.
;PCODE: $0000004D VOL: 0
; 0000 0050             lcd_clear();
;PCODE: $0000004E VOL: 0
; 0000 0051         }
; 0000 0052     }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0053 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;char SPI_SlaveReceive(void) {               //데이터 시트 코드 복사
; 0000 0054 char SPI_SlaveReceive(void) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0055     /* Wait for reception complete */
; 0000 0056     while(!(SPSR & (1<<SPIF)))
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0057     ;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0058 
; 0000 0059     /* Return data register */
; 0000 005A     return SPDR;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005B }
;PCODE: $00000061 VOL: 0
