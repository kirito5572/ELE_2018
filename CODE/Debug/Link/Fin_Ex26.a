;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;unsigned char delay;
;unsigned char ADC(unsigned char);
;void main() {
; 0000 0005 void main() {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0006     DDRB = 0x0f;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0007     DDRF = 0xf0;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0008     ADCW = 0x0000;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0009     while(1) {
;PCODE: $00000014 VOL: 0
; 0000 000A         delay = (ADC(0x8f) / 6) + 10;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 000B         PORTB = 0x01;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 000C         delay_ms(delay);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 000D         PORTB = 0x09;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 000E         delay_ms(delay);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 000F         PORTB = 0x04;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0010         delay_ms(delay);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0011         PORTB = 0x05;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0012         delay_ms(delay);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0013         PORTB = 0x02;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0014         delay_ms(delay);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0015         PORTB = 0x06;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0016         delay_ms(delay);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0017         PORTB = 0x08;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0018         delay_ms(delay);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0019         PORTB = 0x0a;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 001A         delay_ms(delay);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 001B     }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 001C }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;unsigned char ADC(unsigned char ADCS) {
; 0000 001D unsigned char ADC(unsigned char ADCS) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 001E     ADMUX = 0x20;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;	ADCS -> R17
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 001F     ADCSRA = ADCS;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0020     ADCSRA |= 0x40; //(1<<ADSC)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0021     delay_us(10);
;PCODE: $00000054 VOL: 0
; 0000 0022     while(ADIF == 0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0023     return ADCH;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0024 }
;PCODE: $0000005C VOL: 0
